{"file_contents":{"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/CashFlowPlanner.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport BudgetAllocationSlider from \"@/components/BudgetAllocationSlider\";\nimport CategoryAllocationChart from \"@/components/CategoryAllocationChart\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport SavingsJarCard from \"@/components/SavingsJarCard\";\nimport SavingsJarDialog from \"@/components/SavingsJarDialog\";\nimport CreateSavingsJarDialog from \"@/components/CreateSavingsJarDialog\";\nimport BudgetItemsDialog from \"@/components/BudgetItemsDialog\";\nimport ExtraIncomeDialog from \"@/components/ExtraIncomeDialog\";\nimport { useBudget } from \"@/hooks/useBudget\";\nimport { useCreateBudget } from \"@/hooks/useBudgetOperations\";\nimport { useBudgetCategories } from \"@/hooks/useBudgetCategories\";\nimport { useBudgetItems } from \"@/hooks/useBudgetItems\";\nimport { useSavingsJars } from \"@/hooks/useSavingsJars\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, ChevronRight } from \"lucide-react\";\nimport type { SavingsJar } from \"@shared/schema\";\n\nexport default function CashFlowPlanner() {\n  const now = new Date();\n  const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n  \n  const { data: budget } = useBudget(currentMonth);\n  const { data: categories } = useBudgetCategories(budget?.id);\n  const { data: budgetItems } = useBudgetItems(budget?.id);\n  const { data: prevIncomeData } = useQuery<{ totalIncome: number }>({\n    queryKey: ['/api/budgets', currentMonth, 'previous-income'],\n  });\n  const { data: savingsJars } = useSavingsJars();\n  \n  const createBudget = useCreateBudget();\n\n  const [selectedJar, setSelectedJar] = useState<SavingsJar | null>(null);\n  const [createJarOpen, setCreateJarOpen] = useState(false);\n  const [fixedIncomeDialogOpen, setFixedIncomeDialogOpen] = useState(false);\n  const [fixedExpenseDialogOpen, setFixedExpenseDialogOpen] = useState(false);\n  const [extraIncomeDialogOpen, setExtraIncomeDialogOpen] = useState(false);\n\n  // 從項目列表計算總額\n  const fixedIncome = useMemo(() => {\n    if (!budgetItems) return 0;\n    return budgetItems\n      .filter(item => item.type === \"fixed_income\")\n      .reduce((sum, item) => sum + parseFloat(item.amount), 0);\n  }, [budgetItems]);\n\n  const fixedExpense = useMemo(() => {\n    if (!budgetItems) return 0;\n    return budgetItems\n      .filter(item => item.type === \"fixed_expense\")\n      .reduce((sum, item) => sum + parseFloat(item.amount), 0);\n  }, [budgetItems]);\n\n  const extraIncome = useMemo(() => {\n    if (!budgetItems) return 0;\n    return budgetItems\n      .filter(item => item.type === \"extra_income\")\n      .reduce((sum, item) => sum + parseFloat(item.amount), 0);\n  }, [budgetItems]);\n\n  const previousMonthIncome = prevIncomeData?.totalIncome || 0;\n  const fixedDisposableIncome = fixedIncome - fixedExpense;\n  const extraDisposableIncome = extraIncome;\n\n  const categoryTotals = useMemo(() => {\n    const totalsMap = new Map<string, { name: string; amount: number; color: string }>();\n    \n    // 先處理預算類別\n    if (categories && categories.length > 0) {\n      categories.forEach(cat => {\n        const amount = cat.type === \"fixed\"\n          ? (fixedDisposableIncome * (cat.percentage || 0)) / 100\n          : (extraDisposableIncome * (cat.percentage || 0)) / 100;\n        \n        if (totalsMap.has(cat.name)) {\n          const existing = totalsMap.get(cat.name)!;\n          existing.amount += amount;\n        } else {\n          totalsMap.set(cat.name, {\n            name: cat.name,\n            amount,\n            color: cat.color,\n          });\n        }\n      });\n    }\n    \n    // 加入啟用存錢罐的類別（使用已存金額計算分配）\n    if (savingsJars) {\n      savingsJars\n        .filter(jar => jar.includeInDisposable === \"true\")\n        .forEach(jar => {\n          const jarCategories = (jar as any).categories || [];\n          const jarCurrentAmount = parseFloat(jar.currentAmount);\n          \n          jarCategories.forEach((cat: any) => {\n            const categoryAmount = (jarCurrentAmount * (parseFloat(cat.percentage) || 0)) / 100;\n            \n            if (categoryAmount > 0) {\n              if (totalsMap.has(cat.name)) {\n                const existing = totalsMap.get(cat.name)!;\n                existing.amount += categoryAmount;\n              } else {\n                // 如果是新類別，檢查是否有同名的預算類別以匹配顏色\n                const matchingBudgetCat = categories?.find(c => c.name === cat.name);\n                totalsMap.set(cat.name, {\n                  name: cat.name,\n                  amount: categoryAmount,\n                  color: matchingBudgetCat ? matchingBudgetCat.color : cat.color,\n                });\n              }\n            }\n          });\n        });\n    }\n    \n    return Array.from(totalsMap.values()).sort((a, b) => b.amount - a.amount);\n  }, [categories, fixedDisposableIncome, extraDisposableIncome, savingsJars]);\n\n  // 本月可支配金額 = 所有類別的加總\n  const totalDisposableIncome = useMemo(() => {\n    return categoryTotals.reduce((sum, cat) => sum + cat.amount, 0);\n  }, [categoryTotals]);\n\n  // 自動創建預算（如果不存在）\n  const ensureBudget = async () => {\n    if (!budget) {\n      await createBudget.mutateAsync({\n        month: currentMonth,\n        fixedIncome: \"0\",\n        fixedExpense: \"0\",\n        extraIncome: \"0\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <h1 className=\"text-xl font-bold\">現金流規劃</h1>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        {/* 1. 本月可支配金額 */}\n        <Card className=\"p-6 bg-primary/10 border-primary/20\">\n          <p className=\"text-sm text-muted-foreground mb-1 text-center\">本月可支配金額</p>\n          <p className=\"text-4xl font-bold text-primary text-center\" data-testid=\"text-total-disposable\">\n            NT$ {totalDisposableIncome.toLocaleString()}\n          </p>\n        </Card>\n\n        {/* 2. 本月各類別可支配金額清單（橫條圖） */}\n        <CategoryAllocationChart categories={categoryTotals} />\n\n        {/* 3. 本月固定收支 */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">本月固定收支</h3>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <button\n              onClick={async () => {\n                await ensureBudget();\n                setFixedIncomeDialogOpen(true);\n              }}\n              className=\"p-4 bg-primary/10 border-primary/20 rounded-md border hover-elevate active-elevate-2 text-left transition-all\"\n              data-testid=\"button-fixed-income\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">固定收入</p>\n                  <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-fixed-income\">\n                    NT$ {fixedIncome.toLocaleString()}\n                  </p>\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </button>\n            \n            <button\n              onClick={async () => {\n                await ensureBudget();\n                setFixedExpenseDialogOpen(true);\n              }}\n              className=\"p-4 bg-destructive/10 border-destructive/20 rounded-md border hover-elevate active-elevate-2 text-left transition-all\"\n              data-testid=\"button-fixed-expense\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">固定支出</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-fixed-expense\">\n                    NT$ {fixedExpense.toLocaleString()}\n                  </p>\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </button>\n\n            <div className=\"p-4 bg-chart-3/10 border-chart-3/20 rounded-md border\">\n              <p className=\"text-sm text-muted-foreground mb-1\">每月固定可支配金額</p>\n              <p className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-fixed-disposable\">\n                NT$ {fixedDisposableIncome.toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* 4. 本月固定可支配金額分配 */}\n        <BudgetAllocationSlider\n          title=\"本月固定可支配金額分配\"\n          totalAmount={fixedDisposableIncome}\n          budgetId={budget?.id}\n          categories={categories || []}\n          type=\"fixed\"\n        />\n\n        {/* 5. 本月額外可支配金額 */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">本月額外可支配金額</h3>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <button\n              onClick={async () => {\n                await ensureBudget();\n                setExtraIncomeDialogOpen(true);\n              }}\n              className=\"p-4 bg-primary/10 border-primary/20 rounded-md border hover-elevate active-elevate-2 text-left transition-all\"\n              data-testid=\"button-extra-income\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">額外收入</p>\n                  <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-extra-income\">\n                    NT$ {extraIncome.toLocaleString()}\n                  </p>\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </button>\n\n            <div className=\"p-4 bg-chart-3/10 border-chart-3/20 rounded-md border\">\n              <p className=\"text-sm text-muted-foreground mb-1\">額外可支配金額</p>\n              <p className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-extra-disposable\">\n                NT$ {extraDisposableIncome.toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* 6. 本月額外可支配金額分配 */}\n        <BudgetAllocationSlider\n          title=\"本月額外可支配金額分配\"\n          totalAmount={extraDisposableIncome}\n          budgetId={budget?.id}\n          categories={categories || []}\n          type=\"extra\"\n        />\n\n        {/* 7. 存錢罐 */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold\">存錢罐</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setCreateJarOpen(true)}\n              data-testid=\"button-create-jar\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              新增存錢罐\n            </Button>\n          </div>\n\n          {!savingsJars || savingsJars.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              尚無存錢罐，點擊上方按鈕創建您的第一個存錢罐\n            </p>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {savingsJars.map((jar) => (\n                <SavingsJarCard\n                  key={jar.id}\n                  jar={jar}\n                  onOpenSettings={() => setSelectedJar(jar)}\n                />\n              ))}\n            </div>\n          )}\n        </Card>\n\n        <CreateSavingsJarDialog\n          open={createJarOpen}\n          onOpenChange={setCreateJarOpen}\n        />\n\n        <SavingsJarDialog\n          jar={selectedJar}\n          open={!!selectedJar}\n          onOpenChange={(open) => !open && setSelectedJar(null)}\n        />\n\n        {budget && (\n          <>\n            <BudgetItemsDialog\n              budgetId={budget.id}\n              type=\"fixed_income\"\n              title=\"固定收入項目\"\n              open={fixedIncomeDialogOpen}\n              onOpenChange={setFixedIncomeDialogOpen}\n            />\n\n            <BudgetItemsDialog\n              budgetId={budget.id}\n              type=\"fixed_expense\"\n              title=\"固定支出項目\"\n              open={fixedExpenseDialogOpen}\n              onOpenChange={setFixedExpenseDialogOpen}\n            />\n\n            <ExtraIncomeDialog\n              budgetId={budget.id}\n              previousMonthIncome={previousMonthIncome}\n              fixedExpense={fixedExpense}\n              open={extraIncomeDialogOpen}\n              onOpenChange={setExtraIncomeDialogOpen}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13124},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/examples/PiggyBankIcon.tsx":{"content":"import PiggyBankIcon from '../PiggyBankIcon';\n\nexport default function PiggyBankIconExample() {\n  return <PiggyBankIcon netWorth={580000} />;\n}\n","size_bytes":144},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/useLedger.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { LedgerEntry, InsertLedgerEntry } from \"@shared/schema\";\n\nexport function useLedgerEntries() {\n  return useQuery<LedgerEntry[]>({\n    queryKey: [\"/api/ledger\"],\n  });\n}\n\nexport function useCreateLedgerEntry() {\n  return useMutation({\n    mutationFn: async (data: InsertLedgerEntry) => {\n      const response = await fetch(\"/api/ledger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create ledger entry\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ledger\"] });\n    },\n  });\n}\n","size_bytes":808},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/AccountManagement.tsx":{"content":"import { ChevronLeft, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { useLocation } from \"wouter\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\n\nexport default function AccountManagement() {\n  const [, setLocation] = useLocation();\n  const { data: accounts, isLoading } = useAssets();\n\n  const groupedAccounts = accounts?.reduce((acc, account) => {\n    if (!acc[account.type]) {\n      acc[account.type] = [];\n    }\n    acc[account.type].push(account);\n    return acc;\n  }, {} as Record<string, typeof accounts>);\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back\"\n            >\n              <ChevronLeft className=\"w-5 h-5\" />\n            </Button>\n            <h1 className=\"text-xl font-bold\">帳戶管理</h1>\n          </div>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        <Button \n          className=\"w-full\" \n          onClick={() => setLocation(\"/account-management/add\")}\n          data-testid=\"button-add-account\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          添加帳戶\n        </Button>\n\n        {isLoading ? (\n          <div className=\"text-center py-8 text-muted-foreground\">載入中...</div>\n        ) : accounts && accounts.length > 0 ? (\n          <div className=\"space-y-4\">\n            {Object.entries(groupedAccounts || {}).map(([type, typeAccounts]) => (\n              <Card key={type} className=\"p-4\">\n                <h3 className=\"font-semibold mb-3 text-lg\">{type}</h3>\n                <div className=\"space-y-2\">\n                  {typeAccounts?.map((account) => {\n                    const twd = account.currency === \"TWD\" \n                      ? parseFloat(account.balance)\n                      : parseFloat(account.balance) * parseFloat(account.exchangeRate || \"1\");\n                    \n                    return (\n                      <div\n                        key={account.id}\n                        onClick={() => setLocation(`/account-management/edit/${account.id}`)}\n                        className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg hover-elevate cursor-pointer\"\n                        data-testid={`account-${account.accountName}`}\n                      >\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{account.accountName}</p>\n                          {account.note && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">{account.note}</p>\n                          )}\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {account.currency} {parseFloat(account.balance).toLocaleString()}\n                            {account.currency !== \"TWD\" && ` × ${account.exchangeRate}`}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold\">NT$ {twd.toLocaleString()}</p>\n                          {account.includeInTotal === \"false\" && (\n                            <p className=\"text-xs text-muted-foreground\">不計入總資產</p>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground mb-4\">尚未新增任何帳戶</p>\n            <Button onClick={() => setLocation(\"/account-management/add\")}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              添加第一個帳戶\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4283},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 20% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 220 12% 88%;\n\n  --card: 220 18% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 220 14% 91%;\n\n  --sidebar: 220 16% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 220 12% 88%;\n\n  --sidebar-primary: 220 88% 63%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 14% 89%;\n\n  --sidebar-accent-foreground: 215 25% 29%;\n\n  --sidebar-ring: 220 88% 63%;\n\n  --popover: 220 16% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 220 14% 86%;\n\n  --primary: 220 88% 63%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 12% 86%;\n\n  --secondary-foreground: 215 25% 29%;\n\n  --muted: 220 14% 90%;\n\n  --muted-foreground: 0 0% 48%;\n\n  --accent: 220 12% 88%;\n\n  --accent-foreground: 215 25% 29%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 16% 75%;\n  --ring: 220 88% 63%;\n  --chart-1: 220 88% 63%;\n  --chart-2: 215 25% 29%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 45 93% 47%;\n\n  --font-sans: 'Noto Sans TC', -apple-system, 'PingFang TC', system-ui, sans-serif;\n  --font-serif: 'Source Han Sans TC', Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 20% 20% / 0.04);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 20% 20% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 20% 20% / 0.06), 0px 1px 2px -1px hsl(220 20% 20% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 20% 20% / 0.08), 0px 2px 4px -1px hsl(220 20% 20% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 20% 20% / 0.10), 0px 3px 6px -1px hsl(220 20% 20% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 20% 20% / 0.12), 0px 4px 8px -2px hsl(220 20% 20% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 20% 20% / 0.14), 0px 10px 10px -5px hsl(220 20% 20% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 20% 20% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 10%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 10% 25%;\n\n  --card: 220 12% 15%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 10% 22%;\n\n  --sidebar: 220 12% 18%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 10% 24%;\n\n  --sidebar-primary: 220 88% 68%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 14% 24%;\n\n  --sidebar-accent-foreground: 220 86% 75%;\n\n  --sidebar-ring: 220 88% 68%;\n\n  --popover: 220 12% 20%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 10% 26%;\n\n  --primary: 220 88% 65%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 10% 28%;\n\n  --secondary-foreground: 220 86% 80%;\n\n  --muted: 220 12% 22%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 220 12% 25%;\n\n  --accent-foreground: 220 86% 78%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 14% 45%;\n  --ring: 220 88% 68%;\n  --chart-1: 220 88% 72%;\n  --chart-2: 215 60% 70%;\n  --chart-3: 142 76% 55%;\n  --chart-4: 0 84% 65%;\n  --chart-5: 45 93% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -2px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 10px 10px -5px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.55);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  \n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11398},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":118},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/AssetOverview.tsx":{"content":"import { motion } from \"framer-motion\";\nimport PiggyBankIcon from \"@/components/PiggyBankIcon\";\nimport AssetTrendChart from \"@/components/AssetTrendChart\";\nimport AssetBreakdownChart from \"@/components/AssetBreakdownChart\";\nimport AssetDetailTable from \"@/components/AssetDetailTable\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { useMemo } from \"react\";\n\nexport default function AssetOverview() {\n  const { data: accounts, isLoading } = useAssets();\n\n  const netWorth = useMemo(() => {\n    if (!accounts) return 0;\n    return accounts\n      .filter(account => account.includeInTotal === \"true\")\n      .reduce((total, account) => {\n        const twd = account.currency === \"TWD\"\n          ? parseFloat(account.balance)\n          : parseFloat(account.balance) * parseFloat(account.exchangeRate || \"1\");\n        return total + twd;\n      }, 0);\n  }, [accounts]);\n\n  const { totalAssets, totalLiabilities } = useMemo(() => {\n    if (!accounts) return { totalAssets: 0, totalLiabilities: 0 };\n    \n    return accounts\n      .filter(account => account.includeInTotal === \"true\")\n      .reduce((acc, account) => {\n        const twd = account.currency === \"TWD\"\n          ? parseFloat(account.balance)\n          : parseFloat(account.balance) * parseFloat(account.exchangeRate || \"1\");\n        \n        if (twd >= 0) {\n          acc.totalAssets += twd;\n        } else {\n          acc.totalLiabilities += Math.abs(twd);\n        }\n        return acc;\n      }, { totalAssets: 0, totalLiabilities: 0 });\n  }, [accounts]);\n\n  const breakdownData = useMemo(() => {\n    if (!accounts) return [];\n    \n    const typeGroups = accounts\n      .filter(account => account.includeInTotal === \"true\")\n      .reduce((acc, account) => {\n        const twd = account.currency === \"TWD\"\n          ? parseFloat(account.balance)\n          : parseFloat(account.balance) * parseFloat(account.exchangeRate || \"1\");\n        \n        if (!acc[account.type]) {\n          acc[account.type] = 0;\n        }\n        acc[account.type] += twd;\n        return acc;\n      }, {} as Record<string, number>);\n\n    const colors = [\n      \"hsl(var(--chart-1))\",\n      \"hsl(var(--chart-2))\",\n      \"hsl(var(--chart-3))\",\n      \"hsl(var(--chart-4))\",\n      \"hsl(var(--chart-5))\",\n    ];\n\n    return Object.entries(typeGroups).map(([name, value], index) => ({\n      name,\n      value,\n      color: colors[index % colors.length],\n    }));\n  }, [accounts]);\n\n  const detailData = useMemo(() => {\n    if (!accounts) return [];\n    \n    const grouped = accounts.reduce((acc, account) => {\n      if (!acc[account.type]) {\n        acc[account.type] = [];\n      }\n      const twd = account.currency === \"TWD\"\n        ? parseFloat(account.balance)\n        : parseFloat(account.balance) * parseFloat(account.exchangeRate || \"1\");\n      \n      acc[account.type].push({\n        bank: account.accountName,\n        balance: parseFloat(account.balance),\n        currency: account.currency,\n        exchangeRate: parseFloat(account.exchangeRate || \"1\"),\n      });\n      return acc;\n    }, {} as Record<string, any[]>);\n\n    return Object.entries(grouped).map(([type, assets]) => ({\n      type,\n      assets,\n    }));\n  }, [accounts]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pb-20 bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">載入中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <h1 className=\"text-xl font-bold\">資產總覽</h1>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"flex flex-col items-center py-8\"\n        >\n          <PiggyBankIcon netWorth={netWorth} />\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.3, duration: 0.5 }}\n            className=\"mt-4 text-center space-y-4\"\n          >\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">總資產淨值</p>\n              <h2 className=\"text-5xl font-bold text-primary\" data-testid=\"text-networth\">\n                NT$ {netWorth.toLocaleString()}\n              </h2>\n            </div>\n            <div className=\"grid grid-cols-2 gap-6 max-w-md mx-auto\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">資產</p>\n                <p className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-total-assets\">\n                  NT$ {totalAssets.toLocaleString()}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">負債</p>\n                <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-liabilities\">\n                  NT$ {totalLiabilities.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.5 }}\n        >\n          <AssetTrendChart currentNetWorth={netWorth} />\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3, duration: 0.5 }}\n        >\n          <AssetBreakdownChart data={breakdownData.length > 0 ? breakdownData : undefined} />\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.5 }}\n        >\n          <AssetDetailTable data={detailData.length > 0 ? detailData : undefined} />\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6339},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/InvestmentHoldingsTable.tsx":{"content":"import InvestmentHoldingsTable from '../InvestmentHoldingsTable';\n\nexport default function InvestmentHoldingsTableExample() {\n  return <InvestmentHoldingsTable />;\n}\n","size_bytes":166},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/AssetBreakdownChart.tsx":{"content":"import AssetBreakdownChart from '../AssetBreakdownChart';\n\nexport default function AssetBreakdownChartExample() {\n  return <AssetBreakdownChart />;\n}\n","size_bytes":150},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/AssetDetailTable.tsx":{"content":"import { ChevronDown, ChevronRight, Plus, ArrowRightLeft } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport AccountManagementDialog from \"@/components/AccountManagementDialog\";\nimport TransferDialog from \"@/components/TransferDialog\";\n\ninterface Asset {\n  bank: string;\n  balance: number;\n  currency: string;\n  exchangeRate?: number;\n}\n\ninterface AssetType {\n  type: string;\n  assets: Asset[];\n}\n\ninterface AssetDetailTableProps {\n  data?: AssetType[];\n}\n\nexport default function AssetDetailTable({ data }: AssetDetailTableProps) {\n  const assetData = data || [];\n  const [accountManagementOpen, setAccountManagementOpen] = useState(false);\n  const [transferOpen, setTransferOpen] = useState(false);\n\n  return (\n    <>\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">資產明細</h3>\n          <div className=\"flex gap-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => setTransferOpen(true)} \n              data-testid=\"button-transfer\"\n            >\n              <ArrowRightLeft className=\"w-4 h-4 mr-1\" />\n              轉帳\n            </Button>\n            <Button \n              size=\"sm\" \n              onClick={() => setAccountManagementOpen(true)} \n              data-testid=\"button-account-management\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              帳戶管理\n            </Button>\n          </div>\n        </div>\n      {assetData.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">尚未新增任何帳戶</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">點擊上方按鈕開始新增帳戶</p>\n        </div>\n      ) : (\n        <Accordion \n          type=\"multiple\" \n          defaultValue={assetData.map((_, idx) => `item-${idx}`)}\n          className=\"space-y-2\"\n        >\n          {assetData.map((assetType, idx) => (\n            <AccordionItem key={idx} value={`item-${idx}`} className=\"border rounded-lg px-4\">\n              <AccordionTrigger className=\"hover:no-underline py-3\" data-testid={`accordion-${assetType.type}`}>\n                <div className=\"flex items-center justify-between w-full pr-4\">\n                  <span className=\"font-medium\">{assetType.type}</span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {assetType.assets.length} 個帳戶\n                  </span>\n                </div>\n              </AccordionTrigger>\n              <AccordionContent className=\"pb-3\">\n                <div className=\"space-y-2 mt-2\">\n                  {assetType.assets.map((asset, assetIdx) => {\n                    const twd = asset.exchangeRate\n                      ? asset.balance * asset.exchangeRate\n                      : asset.balance;\n                    return (\n                      <div\n                        key={assetIdx}\n                        className=\"flex items-center justify-between p-3 bg-muted/50 rounded-md\"\n                        data-testid={`asset-${asset.bank}`}\n                      >\n                        <div>\n                          <p className=\"font-medium text-sm\">{asset.bank}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {asset.currency} {asset.balance.toLocaleString()}\n                            {asset.exchangeRate && asset.exchangeRate !== 1 && ` × ${asset.exchangeRate}`}\n                          </p>\n                        </div>\n                        <p className=\"font-semibold\">NT$ {twd.toLocaleString()}</p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          ))}\n        </Accordion>\n      )}\n      </Card>\n\n      <AccountManagementDialog\n        open={accountManagementOpen}\n        onOpenChange={setAccountManagementOpen}\n      />\n\n      <TransferDialog\n        open={transferOpen}\n        onOpenChange={setTransferOpen}\n      />\n    </>\n  );\n}\n","size_bytes":4342},"client/src/components/examples/AssetDetailTable.tsx":{"content":"import AssetDetailTable from '../AssetDetailTable';\n\nexport default function AssetDetailTableExample() {\n  return <AssetDetailTable />;\n}\n","size_bytes":138},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/Investment.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport InvestmentHoldingsTable from \"@/components/InvestmentHoldingsTable\";\nimport AssetBreakdownChart from \"@/components/AssetBreakdownChart\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Investment() {\n  //todo: remove mock functionality\n  const portfolioData = [\n    { name: \"台股\", value: 150000, color: \"hsl(var(--chart-1))\" },\n    { name: \"美股\", value: 80000, color: \"hsl(var(--chart-2))\" },\n    { name: \"加密貨幣\", value: 50000, color: \"hsl(var(--chart-3))\" },\n  ];\n\n  const totalValue = portfolioData.reduce((sum, item) => sum + item.value, 0);\n  const totalCost = 260000;\n  const totalPL = totalValue - totalCost;\n  const totalPLPercent = (totalPL / totalCost) * 100;\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <h1 className=\"text-xl font-bold\">投資組合</h1>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">總覽</h3>\n            <Button size=\"sm\" data-testid=\"button-add-transaction\">\n              <Plus className=\"w-4 h-4 mr-1\" />\n              新增交易\n            </Button>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">總市值</p>\n              <p className=\"text-2xl font-bold\" data-testid=\"text-total-value\">\n                NT$ {totalValue.toLocaleString()}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">總成本</p>\n              <p className=\"text-2xl font-bold\" data-testid=\"text-total-cost\">\n                NT$ {totalCost.toLocaleString()}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">總損益</p>\n              <p\n                className={`text-2xl font-bold ${\n                  totalPL >= 0 ? \"text-chart-3\" : \"text-destructive\"\n                }`}\n                data-testid=\"text-total-pl\"\n              >\n                {totalPL >= 0 ? \"+\" : \"\"}NT$ {totalPL.toLocaleString()}\n                <span className=\"text-sm ml-2\">\n                  ({totalPLPercent.toFixed(1)}%)\n                </span>\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        <AssetBreakdownChart data={portfolioData} />\n\n        <InvestmentHoldingsTable />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2876},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  decimal,\n  integer,\n  text,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  preferredCurrency: varchar(\"preferred_currency\").default(\"TWD\"),\n  preferredLanguage: varchar(\"preferred_language\").default(\"zh-TW\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Asset categories and accounts\nexport const assetAccounts = pgTable(\"asset_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: varchar(\"type\").notNull(), // Account type - user can define custom types\n  accountName: varchar(\"account_name\").notNull(),\n  note: text(\"note\"),\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  currency: varchar(\"currency\").notNull().default(\"TWD\"),\n  exchangeRate: decimal(\"exchange_rate\", { precision: 10, scale: 4 }).default(\"1\"),\n  includeInTotal: varchar(\"include_in_total\").notNull().default(\"true\"), // \"true\" or \"false\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertAssetAccountSchema = createInsertSchema(assetAccounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertAssetAccount = z.infer<typeof insertAssetAccountSchema>;\nexport type AssetAccount = typeof assetAccounts.$inferSelect;\n\n// Asset history for trend tracking\nexport const assetHistory = pgTable(\"asset_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  totalNetWorth: decimal(\"total_net_worth\", { precision: 15, scale: 2 }).notNull(),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n});\n\nexport const insertAssetHistorySchema = createInsertSchema(assetHistory).omit({\n  id: true,\n  recordedAt: true,\n});\n\nexport type InsertAssetHistory = z.infer<typeof insertAssetHistorySchema>;\nexport type AssetHistory = typeof assetHistory.$inferSelect;\n\n// Budget planning\nexport const budgets = pgTable(\"budgets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  month: varchar(\"month\").notNull(), // YYYY-MM format\n  fixedIncome: decimal(\"fixed_income\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  fixedExpense: decimal(\"fixed_expense\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  extraIncome: decimal(\"extra_income\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertBudgetSchema = createInsertSchema(budgets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;\nexport type Budget = typeof budgets.$inferSelect;\n\n// Budget categories\nexport const budgetCategories = pgTable(\"budget_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  budgetId: varchar(\"budget_id\").notNull().references(() => budgets.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull().default(\"fixed\"), // \"fixed\" or \"extra\"\n  percentage: integer(\"percentage\").notNull().default(0),\n  color: varchar(\"color\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertBudgetCategorySchema = createInsertSchema(budgetCategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertBudgetCategory = z.infer<typeof insertBudgetCategorySchema>;\nexport type BudgetCategory = typeof budgetCategories.$inferSelect;\n\n// Budget items (固定收支項目和額外收入項目)\nexport const budgetItems = pgTable(\"budget_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  budgetId: varchar(\"budget_id\").notNull().references(() => budgets.id, { onDelete: 'cascade' }),\n  type: varchar(\"type\").notNull(), // \"fixed_income\", \"fixed_expense\", or \"extra_income\"\n  name: varchar(\"name\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  isAutoCalculated: varchar(\"is_auto_calculated\").notNull().default(\"false\"), // \"true\" for \"上月額外收入\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertBudgetItemSchema = createInsertSchema(budgetItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertBudgetItem = z.infer<typeof insertBudgetItemSchema>;\nexport type BudgetItem = typeof budgetItems.$inferSelect;\n\n// Ledger entries\nexport const ledgerEntries = pgTable(\"ledger_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: varchar(\"type\").notNull(), // income or expense\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  category: varchar(\"category\").notNull(),\n  accountId: varchar(\"account_id\").references(() => assetAccounts.id, { onDelete: 'set null' }),\n  date: date(\"date\").notNull(),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertLedgerEntrySchema = createInsertSchema(ledgerEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLedgerEntry = z.infer<typeof insertLedgerEntrySchema>;\nexport type LedgerEntry = typeof ledgerEntries.$inferSelect;\n\n// Investment holdings\nexport const investmentHoldings = pgTable(\"investment_holdings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  ticker: varchar(\"ticker\").notNull(),\n  type: varchar(\"type\").notNull(), // Taiwan Stocks, US Stocks, Crypto\n  quantity: decimal(\"quantity\", { precision: 15, scale: 8 }).notNull(),\n  averageCost: decimal(\"average_cost\", { precision: 15, scale: 2 }).notNull(),\n  currentPrice: decimal(\"current_price\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertInvestmentHoldingSchema = createInsertSchema(investmentHoldings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertInvestmentHolding = z.infer<typeof insertInvestmentHoldingSchema>;\nexport type InvestmentHolding = typeof investmentHoldings.$inferSelect;\n\n// Investment transactions\nexport const investmentTransactions = pgTable(\"investment_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  holdingId: varchar(\"holding_id\").notNull().references(() => investmentHoldings.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: varchar(\"type\").notNull(), // buy or sell\n  quantity: decimal(\"quantity\", { precision: 15, scale: 8 }).notNull(),\n  pricePerShare: decimal(\"price_per_share\", { precision: 15, scale: 2 }).notNull(),\n  fees: decimal(\"fees\", { precision: 15, scale: 2 }).default(\"0\"),\n  transactionDate: date(\"transaction_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertInvestmentTransactionSchema = createInsertSchema(investmentTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertInvestmentTransaction = z.infer<typeof insertInvestmentTransactionSchema>;\nexport type InvestmentTransaction = typeof investmentTransactions.$inferSelect;\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  assetAccounts: many(assetAccounts),\n  assetHistory: many(assetHistory),\n  budgets: many(budgets),\n  ledgerEntries: many(ledgerEntries),\n  investmentHoldings: many(investmentHoldings),\n  investmentTransactions: many(investmentTransactions),\n  savingsJars: many(savingsJars),\n}));\n\nexport const assetAccountsRelations = relations(assetAccounts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [assetAccounts.userId],\n    references: [users.id],\n  }),\n  ledgerEntries: many(ledgerEntries),\n}));\n\nexport const budgetsRelations = relations(budgets, ({ one, many }) => ({\n  user: one(users, {\n    fields: [budgets.userId],\n    references: [users.id],\n  }),\n  categories: many(budgetCategories),\n  items: many(budgetItems),\n}));\n\nexport const budgetCategoriesRelations = relations(budgetCategories, ({ one }) => ({\n  budget: one(budgets, {\n    fields: [budgetCategories.budgetId],\n    references: [budgets.id],\n  }),\n}));\n\nexport const budgetItemsRelations = relations(budgetItems, ({ one }) => ({\n  budget: one(budgets, {\n    fields: [budgetItems.budgetId],\n    references: [budgets.id],\n  }),\n}));\n\nexport const ledgerEntriesRelations = relations(ledgerEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [ledgerEntries.userId],\n    references: [users.id],\n  }),\n  account: one(assetAccounts, {\n    fields: [ledgerEntries.accountId],\n    references: [assetAccounts.id],\n  }),\n}));\n\nexport const investmentHoldingsRelations = relations(investmentHoldings, ({ one, many }) => ({\n  user: one(users, {\n    fields: [investmentHoldings.userId],\n    references: [users.id],\n  }),\n  transactions: many(investmentTransactions),\n}));\n\nexport const investmentTransactionsRelations = relations(investmentTransactions, ({ one }) => ({\n  holding: one(investmentHoldings, {\n    fields: [investmentTransactions.holdingId],\n    references: [investmentHoldings.id],\n  }),\n  user: one(users, {\n    fields: [investmentTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Savings jars (存錢罐)\nexport const savingsJars = pgTable(\"savings_jars\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\").notNull(),\n  targetAmount: decimal(\"target_amount\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  currentAmount: decimal(\"current_amount\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  includeInDisposable: varchar(\"include_in_disposable\").notNull().default(\"false\"), // \"true\" or \"false\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSavingsJarSchema = createInsertSchema(savingsJars).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertSavingsJar = z.infer<typeof insertSavingsJarSchema>;\nexport type SavingsJar = typeof savingsJars.$inferSelect;\n\n// Savings jar categories (存錢罐的類別分配)\nexport const savingsJarCategories = pgTable(\"savings_jar_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jarId: varchar(\"jar_id\").notNull().references(() => savingsJars.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\").notNull(),\n  percentage: integer(\"percentage\").notNull().default(0),\n  color: varchar(\"color\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertSavingsJarCategorySchema = createInsertSchema(savingsJarCategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSavingsJarCategory = z.infer<typeof insertSavingsJarCategorySchema>;\nexport type SavingsJarCategory = typeof savingsJarCategories.$inferSelect;\n\n// Savings jar deposits (存錢罐存款記錄)\nexport const savingsJarDeposits = pgTable(\"savings_jar_deposits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jarId: varchar(\"jar_id\").notNull().references(() => savingsJars.id, { onDelete: 'cascade' }),\n  accountId: varchar(\"account_id\").references(() => assetAccounts.id, { onDelete: 'set null' }),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  note: text(\"note\"),\n  depositDate: date(\"deposit_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertSavingsJarDepositSchema = createInsertSchema(savingsJarDeposits).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSavingsJarDeposit = z.infer<typeof insertSavingsJarDepositSchema>;\nexport type SavingsJarDeposit = typeof savingsJarDeposits.$inferSelect;\n\nexport const savingsJarsRelations = relations(savingsJars, ({ one, many }) => ({\n  user: one(users, {\n    fields: [savingsJars.userId],\n    references: [users.id],\n  }),\n  categories: many(savingsJarCategories),\n  deposits: many(savingsJarDeposits),\n}));\n\nexport const savingsJarCategoriesRelations = relations(savingsJarCategories, ({ one }) => ({\n  jar: one(savingsJars, {\n    fields: [savingsJarCategories.jarId],\n    references: [savingsJars.id],\n  }),\n}));\n\nexport const savingsJarDepositsRelations = relations(savingsJarDeposits, ({ one }) => ({\n  jar: one(savingsJars, {\n    fields: [savingsJarDeposits.jarId],\n    references: [savingsJars.id],\n  }),\n  account: one(assetAccounts, {\n    fields: [savingsJarDeposits.accountId],\n    references: [assetAccounts.id],\n  }),\n}));\n","size_bytes":13846},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/AccountManagementDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { Card } from \"@/components/ui/card\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport AccountFormDialog from \"@/components/AccountFormDialog\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AccountManagementDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AccountManagementDialog({ open, onOpenChange }: AccountManagementDialogProps) {\n  const { data: accounts, isLoading } = useAssets();\n  const { toast } = useToast();\n  const [accountFormOpen, setAccountFormOpen] = useState(false);\n  const [editingAccountId, setEditingAccountId] = useState<string | undefined>(undefined);\n\n  const handleEdit = (accountId: string) => {\n    setEditingAccountId(accountId);\n    setAccountFormOpen(true);\n  };\n\n  const handleDelete = async (accountId: string, accountName: string) => {\n    if (!confirm(`確定要刪除帳戶「${accountName}」嗎？`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/assets/${accountId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Delete failed\");\n      }\n\n      toast({\n        title: \"刪除成功\",\n        description: \"帳戶已刪除\",\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n    } catch (error) {\n      toast({\n        title: \"刪除失敗\",\n        description: \"請稍後再試\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const groupedAccounts = accounts?.reduce((acc, account) => {\n    if (!acc[account.type]) {\n      acc[account.type] = [];\n    }\n    acc[account.type].push(account);\n    return acc;\n  }, {} as Record<string, typeof accounts>);\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between pr-8\">\n              <DialogTitle>帳戶管理</DialogTitle>\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  setEditingAccountId(undefined);\n                  setAccountFormOpen(true);\n                }}\n                data-testid=\"button-add-account\"\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                新增帳戶\n              </Button>\n            </div>\n          </DialogHeader>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            </div>\n          ) : !accounts || accounts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">尚未新增任何帳戶</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">點擊上方按鈕開始新增</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {Object.entries(groupedAccounts || {}).map(([type, typeAccounts]) => (\n                <div key={type}>\n                  <h3 className=\"text-sm font-semibold text-muted-foreground mb-2\">{type}</h3>\n                  <div className=\"space-y-2\">\n                    {typeAccounts.map((account) => (\n                      <Card key={account.id} className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <h4 className=\"font-medium\">{account.accountName}</h4>\n                              {account.includeInTotal === \"false\" && (\n                                <span className=\"text-xs bg-muted px-2 py-0.5 rounded\">\n                                  不計入總資產\n                                </span>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {account.currency} {parseFloat(account.balance).toLocaleString()}\n                              {account.currency !== \"TWD\" && account.exchangeRate && (\n                                <span className=\"ml-2\">\n                                  ≈ NT$ {(parseFloat(account.balance) * parseFloat(account.exchangeRate)).toLocaleString()}\n                                </span>\n                              )}\n                            </p>\n                            {account.note && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">{account.note}</p>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => handleEdit(account.id)}\n                              data-testid={`button-edit-${account.id}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => handleDelete(account.id, account.accountName)}\n                              data-testid={`button-delete-${account.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <AccountFormDialog\n        open={accountFormOpen}\n        onOpenChange={setAccountFormOpen}\n        accountId={editingAccountId}\n      />\n    </>\n  );\n}\n","size_bytes":6257},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/examples/LedgerEntry.tsx":{"content":"import LedgerEntry from '../LedgerEntry';\n\nexport default function LedgerEntryExample() {\n  return (\n    <div className=\"border rounded-lg overflow-hidden\">\n      <LedgerEntry\n        type=\"expense\"\n        amount={850}\n        category=\"餐飲\"\n        account=\"中國信託\"\n        date=\"2024/10/12\"\n        note=\"午餐\"\n      />\n      <LedgerEntry\n        type=\"income\"\n        amount={50000}\n        category=\"薪資\"\n        account=\"國泰世華\"\n        date=\"2024/10/01\"\n      />\n    </div>\n  );\n}\n","size_bytes":508},"client/src/components/AccountFormDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAssets, useCreateAsset, useUpdateAsset } from \"@/hooks/useAssets\";\nimport { Plus, X } from \"lucide-react\";\nimport type { InsertAssetAccount } from \"@shared/schema\";\n\ninterface AccountFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  accountId?: string;\n}\n\nconst defaultAccountTypes = [\"台幣\", \"美元\", \"日幣\", \"台股\", \"美股\", \"加密貨幣\", \"房地產\"];\nconst currencies = [\n  { value: \"TWD\", label: \"台幣 (TWD)\" },\n  { value: \"USD\", label: \"美元 (USD)\" },\n  { value: \"JPY\", label: \"日幣 (JPY)\" },\n  { value: \"EUR\", label: \"歐元 (EUR)\" },\n  { value: \"GBP\", label: \"英鎊 (GBP)\" },\n  { value: \"CNY\", label: \"人民幣 (CNY)\" },\n  { value: \"HKD\", label: \"港幣 (HKD)\" },\n];\n\nexport default function AccountFormDialog({ open, onOpenChange, accountId }: AccountFormDialogProps) {\n  const isEdit = !!accountId;\n  const { toast } = useToast();\n  const { data: accounts } = useAssets();\n  const createAsset = useCreateAsset();\n  const updateAsset = useUpdateAsset();\n\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>({});\n  const [accountType, setAccountType] = useState(\"\");\n  const [customType, setCustomType] = useState(\"\");\n  const [showCustomType, setShowCustomType] = useState(false);\n  const [accountName, setAccountName] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [balance, setBalance] = useState(\"\");\n  const [currency, setCurrency] = useState(\"TWD\");\n  const [exchangeRate, setExchangeRate] = useState(\"1\");\n  const [includeInTotal, setIncludeInTotal] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/exchange-rates')\n      .then(res => res.json())\n      .then(rates => setExchangeRates(rates))\n      .catch(err => console.error('Failed to fetch exchange rates:', err));\n  }, []);\n\n  useEffect(() => {\n    if (exchangeRates[currency] && !isEdit) {\n      setExchangeRate(exchangeRates[currency].toString());\n    }\n  }, [currency, exchangeRates, isEdit]);\n\n  useEffect(() => {\n    if (accountType === \"__custom__\" && !showCustomType) {\n      setShowCustomType(true);\n    }\n  }, [accountType, showCustomType]);\n\n  useEffect(() => {\n    if (isEdit && accounts && accountId) {\n      const account = accounts.find(a => a.id === accountId);\n      if (account) {\n        setAccountType(account.type);\n        setAccountName(account.accountName);\n        setNote(account.note || \"\");\n        setBalance(account.balance);\n        setCurrency(account.currency);\n        setExchangeRate(account.exchangeRate || \"1\");\n        setIncludeInTotal(account.includeInTotal === \"true\");\n      }\n    }\n  }, [isEdit, accounts, accountId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const finalType = accountType === \"__custom__\" ? customType : accountType;\n    \n    if (!finalType || !accountName || !balance) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫所有必填欄位\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: InsertAssetAccount = {\n      userId: \"\",\n      type: finalType,\n      accountName,\n      note,\n      balance,\n      currency,\n      exchangeRate: currency === \"TWD\" ? \"1\" : exchangeRate,\n      includeInTotal: includeInTotal ? \"true\" : \"false\",\n    };\n\n    try {\n      if (isEdit && accountId) {\n        await updateAsset.mutateAsync({ id: accountId, data });\n        toast({ title: \"更新成功\", description: \"帳戶資訊已更新\" });\n      } else {\n        await createAsset.mutateAsync(data);\n        toast({ title: \"新增成功\", description: \"帳戶已新增\" });\n      }\n\n      setAccountType(\"\");\n      setCustomType(\"\");\n      setShowCustomType(false);\n      setAccountName(\"\");\n      setNote(\"\");\n      setBalance(\"\");\n      setCurrency(\"TWD\");\n      setExchangeRate(\"1\");\n      setIncludeInTotal(true);\n      \n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: isEdit ? \"更新失敗\" : \"新增失敗\",\n        description: \"請稍後再試\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const twdValue = currency === \"TWD\" \n    ? parseFloat(balance || \"0\")\n    : parseFloat(balance || \"0\") * parseFloat(exchangeRate || \"1\");\n\n  const customTypes = Array.from(new Set(\n    accounts?.map(a => a.type).filter(t => !defaultAccountTypes.includes(t)) || []\n  ));\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{isEdit ? \"編輯帳戶\" : \"新增帳戶\"}</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountType\">帳戶類型 *</Label>\n            <Select value={accountType} onValueChange={setAccountType}>\n              <SelectTrigger id=\"accountType\" data-testid=\"select-account-type\">\n                <SelectValue placeholder=\"選擇類型\" />\n              </SelectTrigger>\n              <SelectContent>\n                {defaultAccountTypes.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n                {customTypes.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n                <SelectItem value=\"__custom__\">+ 自訂類型</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {showCustomType && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"customType\">自訂類型名稱 *</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setShowCustomType(false);\n                    setAccountType(\"\");\n                    setCustomType(\"\");\n                  }}\n                  data-testid=\"button-cancel-custom\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <Input\n                id=\"customType\"\n                value={customType}\n                onChange={(e) => setCustomType(e.target.value)}\n                placeholder=\"輸入自訂類型\"\n                data-testid=\"input-custom-type\"\n              />\n            </div>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountName\">帳戶名稱 *</Label>\n            <Input\n              id=\"accountName\"\n              value={accountName}\n              onChange={(e) => setAccountName(e.target.value)}\n              placeholder=\"例如：中國信託活存\"\n              data-testid=\"input-account-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note\">備註</Label>\n            <Textarea\n              id=\"note\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              placeholder=\"選填\"\n              data-testid=\"input-note\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"balance\">帳戶餘額 *</Label>\n            <Input\n              id=\"balance\"\n              type=\"number\"\n              step=\"0.01\"\n              value={balance}\n              onChange={(e) => setBalance(e.target.value)}\n              data-testid=\"input-balance\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"currency\">主要貨幣</Label>\n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {currencies.map((curr) => (\n                  <SelectItem key={curr.value} value={curr.value}>\n                    {curr.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {currency !== \"TWD\" && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"exchangeRate\">匯率（轉換為台幣）</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"exchangeRate\"\n                    type=\"number\"\n                    step=\"0.0001\"\n                    value={exchangeRate}\n                    onChange={(e) => setExchangeRate(e.target.value)}\n                    data-testid=\"input-exchange-rate\"\n                    className=\"flex-1\"\n                  />\n                  {exchangeRates[currency] && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setExchangeRate(exchangeRates[currency].toString())}\n                      data-testid=\"button-update-rate\"\n                    >\n                      更新匯率\n                    </Button>\n                  )}\n                </div>\n                {exchangeRates[currency] && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    目前匯率: 1 {currency} = {exchangeRates[currency].toFixed(4)} TWD\n                  </p>\n                )}\n              </div>\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">台幣等值</p>\n                <p className=\"text-2xl font-bold text-primary\">\n                  NT$ {twdValue.toLocaleString()}\n                </p>\n              </div>\n            </>\n          )}\n\n          <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n            <Label htmlFor=\"includeInTotal\" className=\"cursor-pointer\">\n              計入總資產\n            </Label>\n            <Switch\n              id=\"includeInTotal\"\n              checked={includeInTotal}\n              onCheckedChange={setIncludeInTotal}\n              data-testid=\"switch-include-in-total\"\n            />\n          </div>\n\n          <div className=\"flex gap-2 justify-end pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              取消\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-submit\">\n              {isEdit ? \"更新\" : \"新增\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11234},"client/src/components/LedgerEntryDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport DatePicker from \"@/components/DatePicker\";\nimport { \n  Car, \n  Users, \n  Home, \n  ShoppingCart, \n  Utensils, \n  Heart, \n  Smartphone,\n  BookOpen,\n  Wallet,\n  TrendingUp,\n  Gift,\n  Plane\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LedgerEntryDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst categories = [\n  { name: \"交通\", icon: Car, color: \"bg-blue-500\" },\n  { name: \"社交\", icon: Users, color: \"bg-purple-500\" },\n  { name: \"房租\", icon: Home, color: \"bg-green-500\" },\n  { name: \"購物\", icon: ShoppingCart, color: \"bg-pink-500\" },\n  { name: \"餐飲\", icon: Utensils, color: \"bg-orange-500\" },\n  { name: \"醫療\", icon: Heart, color: \"bg-red-500\" },\n  { name: \"通訊\", icon: Smartphone, color: \"bg-indigo-500\" },\n  { name: \"教育\", icon: BookOpen, color: \"bg-yellow-500\" },\n  { name: \"薪資\", icon: Wallet, color: \"bg-emerald-500\" },\n  { name: \"投資\", icon: TrendingUp, color: \"bg-cyan-500\" },\n  { name: \"禮物\", icon: Gift, color: \"bg-rose-500\" },\n  { name: \"旅遊\", icon: Plane, color: \"bg-sky-500\" },\n];\n\nexport default function LedgerEntryDialog({ open, onOpenChange }: LedgerEntryDialogProps) {\n  const { toast } = useToast();\n  const { data: accounts } = useAssets();\n  \n  const [type, setType] = useState<\"expense\" | \"income\">(\"expense\");\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\n  const [amount, setAmount] = useState(\"\");\n  const [accountId, setAccountId] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      // Reset form when dialog opens\n      setType(\"expense\");\n      setDate(new Date().toISOString().split('T')[0]);\n      setAmount(\"\");\n      setAccountId(\"\");\n      setCategory(\"\");\n      setNote(\"\");\n    }\n  }, [open]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!amount || !accountId || !category) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫所有必填欄位\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      \n      // Create ledger entry\n      const ledgerResponse = await fetch(\"/api/ledger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          type,\n          amount,\n          category,\n          accountId,\n          date,\n          note,\n        }),\n      });\n\n      if (!ledgerResponse.ok) {\n        throw new Error(\"Failed to create ledger entry\");\n      }\n\n      // Update account balance\n      const account = accounts?.find(a => a.id === accountId);\n      if (account) {\n        const currentBalance = parseFloat(account.balance);\n        const changeAmount = parseFloat(amount);\n        const newBalance = type === \"income\" \n          ? currentBalance + changeAmount \n          : currentBalance - changeAmount;\n\n        const updateResponse = await fetch(`/api/assets/${accountId}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            type: account.type,\n            accountName: account.accountName,\n            note: account.note,\n            balance: newBalance.toString(),\n            currency: account.currency,\n            exchangeRate: account.exchangeRate,\n            includeInTotal: account.includeInTotal,\n          }),\n        });\n\n        if (!updateResponse.ok) {\n          throw new Error(\"Failed to update account balance\");\n        }\n      }\n\n      toast({\n        title: \"記帳成功\",\n        description: \"交易已記錄並更新帳戶餘額\",\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/ledger\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      \n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"記帳失敗\",\n        description: error instanceof Error ? error.message : \"請稍後再試\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>記一筆</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Button\n              type=\"button\"\n              variant={type === \"expense\" ? \"default\" : \"outline\"}\n              onClick={() => setType(\"expense\")}\n              className=\"flex-1\"\n              data-testid=\"button-expense\"\n            >\n              支出\n            </Button>\n            <Button\n              type=\"button\"\n              variant={type === \"income\" ? \"default\" : \"outline\"}\n              onClick={() => setType(\"income\")}\n              className=\"flex-1\"\n              data-testid=\"button-income\"\n            >\n              收入\n            </Button>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>類別 *</Label>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {categories.map((cat) => (\n                <button\n                  key={cat.name}\n                  type=\"button\"\n                  onClick={() => setCategory(cat.name)}\n                  className={cn(\n                    \"flex flex-col items-center gap-1 p-3 rounded-lg border-2 transition-all\",\n                    category === cat.name\n                      ? \"border-primary bg-primary/10\"\n                      : \"border-transparent hover:border-muted-foreground/20\"\n                  )}\n                  data-testid={`category-${cat.name}`}\n                >\n                  <div className={cn(\"w-10 h-10 rounded-full flex items-center justify-center\", cat.color)}>\n                    <cat.icon className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-xs\">{cat.name}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>日期 *</Label>\n            <DatePicker value={date} onChange={setDate} />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"amount\">金額 *</Label>\n            <Input\n              id=\"amount\"\n              type=\"number\"\n              step=\"0.01\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              placeholder=\"輸入金額\"\n              data-testid=\"input-amount\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"account\">銀行帳戶 *</Label>\n            <select\n              id=\"account\"\n              value={accountId}\n              onChange={(e) => setAccountId(e.target.value)}\n              className=\"w-full h-10 px-3 rounded-md border border-input bg-background\"\n              data-testid=\"select-account\"\n            >\n              <option value=\"\">選擇帳戶</option>\n              {accounts?.map((account) => (\n                <option key={account.id} value={account.id}>\n                  {account.type} - {account.accountName} \n                  ({account.currency} {parseFloat(account.balance).toLocaleString()})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note\">備註</Label>\n            <Textarea\n              id=\"note\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              placeholder=\"選填\"\n              data-testid=\"input-note\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex gap-2 justify-end pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              取消\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              data-testid=\"button-submit\"\n            >\n              {isSubmitting ? \"處理中...\" : \"確認\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8899},"client/src/components/examples/BudgetAllocationSlider.tsx":{"content":"import BudgetAllocationSlider from '../BudgetAllocationSlider';\n\nexport default function BudgetAllocationSliderExample() {\n  return <BudgetAllocationSlider />;\n}\n","size_bytes":162},"client/src/pages/Ledger.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport LedgerEntry from \"@/components/LedgerEntry\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport LedgerEntryDialog from \"@/components/LedgerEntryDialog\";\nimport LedgerStatsCarousel from \"@/components/LedgerStatsCarousel\";\nimport IncomeExpenseDetailDialog from \"@/components/IncomeExpenseDetailDialog\";\nimport BudgetUsageChart from \"@/components/BudgetUsageChart\";\nimport CategoryPieChart from \"@/components/CategoryPieChart\";\nimport DisposableIncomeTrendDialog from \"@/components/DisposableIncomeTrendDialog\";\nimport { useLedgerEntries } from \"@/hooks/useLedger\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { useBudget } from \"@/hooks/useBudget\";\nimport { useBudgetCategories } from \"@/hooks/useBudgetCategories\";\nimport { Plus, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function Ledger() {\n  const now = new Date();\n  const [selectedYear, setSelectedYear] = useState(now.getFullYear());\n  const [selectedMonthNum, setSelectedMonthNum] = useState(now.getMonth() + 1);\n  const [entryDialogOpen, setEntryDialogOpen] = useState(false);\n  const [incomeDialogOpen, setIncomeDialogOpen] = useState(false);\n  const [expenseDialogOpen, setExpenseDialogOpen] = useState(false);\n  const [trendDialogOpen, setTrendDialogOpen] = useState(false);\n\n  const selectedMonth = `${selectedYear}/${String(selectedMonthNum).padStart(2, '0')}`;\n\n  const { data: ledgerEntries, isLoading } = useLedgerEntries();\n  const { data: accounts } = useAssets();\n  const { data: budget } = useBudget(selectedMonth.replace('/', '-'));\n  const { data: budgetCategories } = useBudgetCategories(budget?.id);\n\n  // Generate year options (current year ± 5 years)\n  const years = Array.from({ length: 11 }, (_, i) => now.getFullYear() - 5 + i);\n  const months = Array.from({ length: 12 }, (_, i) => i + 1);\n\n  const entries = useMemo(() => {\n    if (!ledgerEntries || !accounts) return [];\n\n    return ledgerEntries\n      .filter(entry => {\n        const entryDate = new Date(entry.date);\n        const [year, month] = selectedMonth.split('/');\n        return entryDate.getFullYear() === parseInt(year) && \n               entryDate.getMonth() + 1 === parseInt(month);\n      })\n      .map(entry => {\n        const account = accounts.find(a => a.id === entry.accountId);\n        // 換算成台幣：如果帳戶幣別不是 TWD，則用匯率換算\n        const amountInTWD = account && account.currency !== \"TWD\"\n          ? parseFloat(entry.amount) * parseFloat(account.exchangeRate || \"1\")\n          : parseFloat(entry.amount);\n        \n        return {\n          type: entry.type as \"income\" | \"expense\",\n          amount: amountInTWD,\n          originalAmount: parseFloat(entry.amount),\n          currency: account?.currency || \"TWD\",\n          category: entry.category,\n          account: account?.accountName || \"未知帳戶\",\n          date: new Date(entry.date).toLocaleDateString('zh-TW'),\n          note: entry.note || undefined,\n        };\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [ledgerEntries, accounts, selectedMonth]);\n\n  const monthIncome = entries\n    .filter((e) => e.type === \"income\")\n    .reduce((sum, e) => sum + e.amount, 0);\n  const monthExpense = entries\n    .filter((e) => e.type === \"expense\")\n    .reduce((sum, e) => sum + e.amount, 0);\n\n  // 各類別收入數據（用於圓餅圖）\n  const incomeCategoryData = useMemo(() => {\n    const categoryMap = new Map<string, number>();\n    \n    entries\n      .filter(e => e.type === \"income\")\n      .forEach(entry => {\n        const current = categoryMap.get(entry.category) || 0;\n        categoryMap.set(entry.category, current + entry.amount);\n      });\n\n    // 使用固定顏色方案\n    const colors = [\n      \"hsl(var(--chart-1))\",\n      \"hsl(var(--chart-2))\",\n      \"hsl(var(--chart-3))\",\n      \"hsl(var(--chart-4))\",\n      \"hsl(var(--chart-5))\",\n    ];\n\n    return Array.from(categoryMap.entries())\n      .map(([name, value], index) => ({\n        name,\n        value,\n        color: colors[index % colors.length],\n      }))\n      .sort((a, b) => b.value - a.value);\n  }, [entries]);\n\n  // 各類別支出數據（用於圓餅圖）\n  const expenseCategoryData = useMemo(() => {\n    const categoryMap = new Map<string, number>();\n    \n    entries\n      .filter(e => e.type === \"expense\")\n      .forEach(entry => {\n        const current = categoryMap.get(entry.category) || 0;\n        categoryMap.set(entry.category, current + entry.amount);\n      });\n\n    // 使用固定顏色方案\n    const colors = [\n      \"hsl(var(--chart-1))\",\n      \"hsl(var(--chart-2))\",\n      \"hsl(var(--chart-3))\",\n      \"hsl(var(--chart-4))\",\n      \"hsl(var(--chart-5))\",\n    ];\n\n    return Array.from(categoryMap.entries())\n      .map(([name, value], index) => ({\n        name,\n        value,\n        color: colors[index % colors.length],\n      }))\n      .sort((a, b) => b.value - a.value);\n  }, [entries]);\n  \n  // 本月可支配金額 = (固定收入 - 固定支出) + 額外收入（來自現金流規劃）\n  const disposableIncome = budget \n    ? (parseFloat(budget.fixedIncome) - parseFloat(budget.fixedExpense)) + parseFloat(budget.extraIncome)\n    : 0;\n  \n  // 剩餘可支配金額 = 本月可支配金額 - 本月總支出\n  const remainingDisposable = disposableIncome - monthExpense;\n\n  // 計算各類別預算使用情況\n  const categoryUsage = useMemo(() => {\n    if (!budgetCategories || !budget) return [];\n\n    const fixedDisposable = parseFloat(budget.fixedIncome) - parseFloat(budget.fixedExpense);\n    const extraDisposable = parseFloat(budget.extraIncome);\n\n    // 合併固定和額外分配的相同類別\n    const categoryMap = new Map<string, { budgeted: number; used: number; color: string }>();\n\n    budgetCategories.forEach(cat => {\n      const budgetAmount = cat.type === \"fixed\"\n        ? (fixedDisposable * (cat.percentage || 0)) / 100\n        : (extraDisposable * (cat.percentage || 0)) / 100;\n\n      if (categoryMap.has(cat.name)) {\n        const existing = categoryMap.get(cat.name)!;\n        existing.budgeted += budgetAmount;\n      } else {\n        categoryMap.set(cat.name, {\n          budgeted: budgetAmount,\n          used: 0,\n          color: cat.color,\n        });\n      }\n    });\n\n    // 計算已使用金額\n    entries\n      .filter(e => e.type === \"expense\")\n      .forEach(entry => {\n        if (categoryMap.has(entry.category)) {\n          categoryMap.get(entry.category)!.used += entry.amount;\n        }\n      });\n\n    return Array.from(categoryMap.entries())\n      .map(([name, data]) => ({ name, ...data }))\n      .sort((a, b) => b.budgeted - a.budgeted);\n  }, [budgetCategories, budget, entries]);\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <h1 className=\"text-xl font-bold\">記帳本</h1>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={() => {\n                if (selectedMonthNum === 1) {\n                  setSelectedYear(selectedYear - 1);\n                  setSelectedMonthNum(12);\n                } else {\n                  setSelectedMonthNum(selectedMonthNum - 1);\n                }\n              }}\n              data-testid=\"button-prev-month\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            \n            <div className=\"flex gap-1\">\n              <Select value={selectedYear.toString()} onValueChange={(v) => setSelectedYear(parseInt(v))}>\n                <SelectTrigger className=\"w-24\" data-testid=\"select-year\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {years.map(year => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}年\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedMonthNum.toString()} onValueChange={(v) => setSelectedMonthNum(parseInt(v))}>\n                <SelectTrigger className=\"w-20\" data-testid=\"select-month\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {months.map(month => (\n                    <SelectItem key={month} value={month.toString()}>\n                      {month}月\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={() => {\n                if (selectedMonthNum === 12) {\n                  setSelectedYear(selectedYear + 1);\n                  setSelectedMonthNum(1);\n                } else {\n                  setSelectedMonthNum(selectedMonthNum + 1);\n                }\n              }}\n              data-testid=\"button-next-month\"\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <Button onClick={() => setEntryDialogOpen(true)} data-testid=\"button-add-entry\">\n            <Plus className=\"w-4 h-4 mr-1\" />\n            記一筆\n          </Button>\n        </div>\n\n        {/* 可滑動的統計卡片 */}\n        <LedgerStatsCarousel>\n          {/* 第一頁：月收入/月支出 + 圓餅圖 */}\n          <div className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <button\n                onClick={() => setIncomeDialogOpen(true)}\n                className=\"text-left\"\n              >\n                <Card className=\"p-4 hover-elevate active-elevate-2 transition-all\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">月收入</p>\n                  <p className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-month-income\">\n                    NT$ {monthIncome.toLocaleString()}\n                  </p>\n                </Card>\n              </button>\n              <button\n                onClick={() => setExpenseDialogOpen(true)}\n                className=\"text-left\"\n              >\n                <Card className=\"p-4 hover-elevate active-elevate-2 transition-all\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">月支出</p>\n                  <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-month-expense\">\n                    NT$ {monthExpense.toLocaleString()}\n                  </p>\n                </Card>\n              </button>\n            </div>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <CategoryPieChart \n                title=\"收入類別分布\" \n                data={incomeCategoryData}\n                totalAmount={monthIncome}\n              />\n              <CategoryPieChart \n                title=\"支出類別分布\" \n                data={expenseCategoryData}\n                totalAmount={monthExpense}\n              />\n            </div>\n          </div>\n\n          {/* 第二頁：可支配金額/剩餘可支配金額 + 預算使用圖 */}\n          <div className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <button\n                onClick={() => setTrendDialogOpen(true)}\n                className=\"text-left\"\n                data-testid=\"button-disposable-trend\"\n              >\n                <Card className=\"p-4 hover-elevate active-elevate-2 transition-all\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">本月可支配金額</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-disposable-income\">\n                    NT$ {disposableIncome.toLocaleString()}\n                  </p>\n                </Card>\n              </button>\n              <button\n                onClick={() => setTrendDialogOpen(true)}\n                className=\"text-left\"\n                data-testid=\"button-remaining-trend\"\n              >\n                <Card className=\"p-4 hover-elevate active-elevate-2 transition-all\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">剩餘可支配金額</p>\n                  <p\n                    className={`text-2xl font-bold ${\n                      remainingDisposable >= 0 ? \"text-chart-3\" : \"text-destructive\"\n                    }`}\n                    data-testid=\"text-remaining-disposable\"\n                  >\n                    {remainingDisposable >= 0 ? \"+\" : \"\"}NT$ {remainingDisposable.toLocaleString()}\n                  </p>\n                </Card>\n              </button>\n            </div>\n            <BudgetUsageChart categories={categoryUsage} />\n          </div>\n        </LedgerStatsCarousel>\n\n        <Card>\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground\">載入中...</p>\n            </div>\n          ) : entries.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">本月尚無記帳記錄</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">點擊上方「記一筆」開始記帳</p>\n            </div>\n          ) : (\n            <div className=\"divide-y\">\n              {entries.map((entry, idx) => (\n                <LedgerEntry key={idx} {...entry} />\n              ))}\n            </div>\n          )}\n        </Card>\n      </div>\n\n      <LedgerEntryDialog \n        open={entryDialogOpen} \n        onOpenChange={setEntryDialogOpen} \n      />\n\n      <IncomeExpenseDetailDialog\n        open={incomeDialogOpen}\n        onOpenChange={setIncomeDialogOpen}\n        type=\"income\"\n        currentMonth={selectedMonth.replace('/', '-')}\n      />\n\n      <IncomeExpenseDetailDialog\n        open={expenseDialogOpen}\n        onOpenChange={setExpenseDialogOpen}\n        type=\"expense\"\n        currentMonth={selectedMonth.replace('/', '-')}\n      />\n\n      <DisposableIncomeTrendDialog\n        open={trendDialogOpen}\n        onOpenChange={setTrendDialogOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":14776},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/AccountForm.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ChevronLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useAssets, useCreateAsset, useUpdateAsset } from \"@/hooks/useAssets\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport type { InsertAssetAccount } from \"@shared/schema\";\n\nconst defaultAccountTypes = [\"台幣\", \"美元\", \"日幣\", \"台股\", \"美股\", \"加密貨幣\", \"房地產\"];\nconst currencies = [\n  { value: \"TWD\", label: \"台幣 (TWD)\" },\n  { value: \"USD\", label: \"美元 (USD)\" },\n  { value: \"JPY\", label: \"日幣 (JPY)\" },\n  { value: \"EUR\", label: \"歐元 (EUR)\" },\n  { value: \"GBP\", label: \"英鎊 (GBP)\" },\n  { value: \"CNY\", label: \"人民幣 (CNY)\" },\n  { value: \"HKD\", label: \"港幣 (HKD)\" },\n];\n\nexport default function AccountForm() {\n  const params = useParams();\n  const accountId = params.id;\n  const isEdit = !!accountId;\n  \n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { data: accounts } = useAssets();\n  const createAsset = useCreateAsset();\n  const updateAsset = useUpdateAsset();\n  \n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>({});\n\n  const [accountType, setAccountType] = useState(\"\");\n  const [customType, setCustomType] = useState(\"\");\n  const [showCustomType, setShowCustomType] = useState(false);\n  const [accountName, setAccountName] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [balance, setBalance] = useState(\"\");\n  const [currency, setCurrency] = useState(\"TWD\");\n  const [exchangeRate, setExchangeRate] = useState(\"1\");\n  const [includeInTotal, setIncludeInTotal] = useState(true);\n\n  const existingTypes = accounts \n    ? Array.from(new Set(accounts.map(a => a.type)))\n    : [];\n  const allTypes = Array.from(new Set([...defaultAccountTypes, ...existingTypes]));\n\n  useEffect(() => {\n    if (isEdit && accounts && accountId) {\n      const account = accounts.find(a => a.id === accountId);\n      if (account) {\n        setAccountType(account.type);\n        setAccountName(account.accountName);\n        setNote(account.note || \"\");\n        setBalance(account.balance);\n        setCurrency(account.currency);\n        setExchangeRate(account.exchangeRate || \"1\");\n        setIncludeInTotal(account.includeInTotal === \"true\");\n      }\n    }\n  }, [isEdit, accounts, accountId]);\n\n  useEffect(() => {\n    // Fetch exchange rates on mount\n    fetch('/api/exchange-rates')\n      .then(res => res.json())\n      .then(rates => {\n        setExchangeRates(rates);\n      })\n      .catch(err => console.error('Failed to fetch exchange rates:', err));\n  }, []);\n\n  useEffect(() => {\n    if (exchangeRates[currency] && !isEdit) {\n      setExchangeRate(exchangeRates[currency].toString());\n    }\n  }, [currency, exchangeRates, isEdit]);\n\n  useEffect(() => {\n    if (accountType === \"__custom__\" && !showCustomType) {\n      setShowCustomType(true);\n    }\n  }, [accountType, showCustomType]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const finalType = showCustomType ? customType : accountType;\n    \n    if (!finalType || !accountName || !balance) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫所有必填欄位\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: InsertAssetAccount = {\n      type: finalType,\n      accountName,\n      note,\n      balance,\n      currency,\n      exchangeRate,\n      includeInTotal: includeInTotal ? \"true\" : \"false\",\n      userId: \"\", // Will be set by backend\n    };\n\n    try {\n      if (isEdit && accountId) {\n        await updateAsset.mutateAsync({ id: accountId, data });\n        toast({\n          title: \"成功\",\n          description: \"帳戶已更新\",\n        });\n      } else {\n        await createAsset.mutateAsync(data);\n        toast({\n          title: \"成功\",\n          description: \"帳戶已新增\",\n        });\n      }\n      setLocation(\"/account-management\");\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: isEdit ? \"更新帳戶失敗\" : \"新增帳戶失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const twdValue = currency === \"TWD\"\n    ? parseFloat(balance || \"0\")\n    : parseFloat(balance || \"0\") * parseFloat(exchangeRate);\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={() => setLocation(\"/account-management\")}\n              data-testid=\"button-back\"\n            >\n              <ChevronLeft className=\"w-5 h-5\" />\n            </Button>\n            <h1 className=\"text-xl font-bold\">{isEdit ? \"編輯帳戶\" : \"添加帳戶\"}</h1>\n          </div>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountType\">帳戶類型 *</Label>\n            {!showCustomType ? (\n              <Select value={accountType} onValueChange={setAccountType}>\n                <SelectTrigger id=\"accountType\" data-testid=\"select-account-type\">\n                  <SelectValue placeholder=\"選擇帳戶類型\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {allTypes.map((type) => (\n                    <SelectItem key={type} value={type}>\n                      {type}\n                    </SelectItem>\n                  ))}\n                  <SelectItem value=\"__custom__\">+ 自訂類型</SelectItem>\n                </SelectContent>\n              </Select>\n            ) : (\n              <Input\n                value={customType}\n                onChange={(e) => setCustomType(e.target.value)}\n                placeholder=\"輸入自訂類型\"\n                data-testid=\"input-custom-type\"\n              />\n            )}\n            {showCustomType && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setShowCustomType(false);\n                  setCustomType(\"\");\n                }}\n              >\n                返回選擇類型\n              </Button>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accountName\">帳戶名稱 *</Label>\n            <Input\n              id=\"accountName\"\n              value={accountName}\n              onChange={(e) => setAccountName(e.target.value)}\n              placeholder=\"例如：薪轉戶\"\n              data-testid=\"input-account-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note\">備註</Label>\n            <Textarea\n              id=\"note\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              placeholder=\"輸入備註資訊\"\n              data-testid=\"input-note\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"balance\">帳戶餘額 *</Label>\n            <Input\n              id=\"balance\"\n              type=\"number\"\n              step=\"0.01\"\n              value={balance}\n              onChange={(e) => setBalance(e.target.value)}\n              placeholder=\"0.00\"\n              data-testid=\"input-balance\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"currency\">主要貨幣 *</Label>\n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {currencies.map((curr) => (\n                  <SelectItem key={curr.value} value={curr.value}>\n                    {curr.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {currency !== \"TWD\" && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"exchangeRate\">匯率（轉換為台幣）</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"exchangeRate\"\n                    type=\"number\"\n                    step=\"0.0001\"\n                    value={exchangeRate}\n                    onChange={(e) => setExchangeRate(e.target.value)}\n                    data-testid=\"input-exchange-rate\"\n                    className=\"flex-1\"\n                  />\n                  {exchangeRates[currency] && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setExchangeRate(exchangeRates[currency].toString())}\n                      data-testid=\"button-update-rate\"\n                    >\n                      更新匯率\n                    </Button>\n                  )}\n                </div>\n                {exchangeRates[currency] && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    目前匯率: 1 {currency} = {exchangeRates[currency].toFixed(4)} TWD\n                  </p>\n                )}\n              </div>\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">台幣等值</p>\n                <p className=\"text-2xl font-bold text-primary\">\n                  NT$ {twdValue.toLocaleString()}\n                </p>\n              </div>\n            </>\n          )}\n\n          <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n            <div>\n              <Label htmlFor=\"includeInTotal\" className=\"cursor-pointer\">\n                計入總資產\n              </Label>\n              <p className=\"text-sm text-muted-foreground\">\n                此帳戶是否計入總資產計算\n              </p>\n            </div>\n            <Switch\n              id=\"includeInTotal\"\n              checked={includeInTotal}\n              onCheckedChange={setIncludeInTotal}\n              data-testid=\"switch-include-in-total\"\n            />\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/account-management\")}\n              className=\"flex-1\"\n            >\n              取消\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\"\n              disabled={createAsset.isPending || updateAsset.isPending}\n              data-testid=\"button-submit\"\n            >\n              {isEdit ? \"儲存\" : \"新增\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11445},"client/src/hooks/useAssets.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { AssetAccount, InsertAssetAccount } from \"@shared/schema\";\n\nexport function useAssets() {\n  return useQuery<AssetAccount[]>({\n    queryKey: [\"/api/assets\"],\n  });\n}\n\nexport function useCreateAsset() {\n  return useMutation({\n    mutationFn: async (data: InsertAssetAccount) => {\n      const res = await apiRequest(\"POST\", \"/api/assets\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets/history\"] });\n    },\n  });\n}\n\nexport function useUpdateAsset() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertAssetAccount> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/assets/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets/history\"] });\n    },\n  });\n}\n\nexport function useDeleteAsset() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/assets/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n    },\n  });\n}\n\nexport function useAssetHistory() {\n  return useQuery({\n    queryKey: [\"/api/assets/history\"],\n  });\n}\n","size_bytes":1558},"client/src/components/AssetTrendChart.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis, Area } from \"recharts\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ntype TimeRange = \"1M\" | \"3M\" | \"6M\" | \"1Y\" | \"5Y\" | \"MAX\";\n\ninterface AssetTrendChartProps {\n  currentNetWorth?: number;\n}\n\nexport default function AssetTrendChart({ currentNetWorth = 0 }: AssetTrendChartProps) {\n  const [timeRange, setTimeRange] = useState<TimeRange>(\"1M\");\n\n  const { data: historyData } = useQuery<Array<{ totalNetWorth: string; recordedAt: string }>>({\n    queryKey: [\"/api/asset-history\"],\n  });\n\n  const chartData = useMemo(() => {\n    const now = new Date();\n    \n    // 如果是 1M，按日呈現\n    if (timeRange === \"1M\") {\n      const days: { date: string; value: number }[] = [];\n      const startDate = new Date(now.getFullYear(), now.getMonth(), 1); // 本月1日\n      \n      // 生成本月每一天\n      for (let d = new Date(startDate); d <= now; d.setDate(d.getDate() + 1)) {\n        const dateStr = `${d.getMonth() + 1}/${d.getDate()}`;\n        \n        // 找出該日或之前最近的歷史記錄\n        let value = 0;\n        if (historyData) {\n          const relevantHistory = historyData\n            .filter(h => new Date(h.recordedAt) <= d)\n            .sort((a, b) => new Date(b.recordedAt).getTime() - new Date(a.recordedAt).getTime());\n          \n          if (relevantHistory.length > 0) {\n            value = parseFloat(relevantHistory[0].totalNetWorth);\n          }\n        }\n        \n        // 如果是今天，使用當前淨值\n        if (d.toDateString() === now.toDateString()) {\n          value = currentNetWorth;\n        }\n        \n        days.push({ date: dateStr, value });\n      }\n      \n      return days;\n    }\n    \n    // 3M 以上按月呈現\n    const months: { date: string; value: number }[] = [];\n    let monthCount = 0;\n    \n    switch (timeRange) {\n      case \"3M\":\n        monthCount = 3;\n        break;\n      case \"6M\":\n        monthCount = 6;\n        break;\n      case \"1Y\":\n        monthCount = 12;\n        break;\n      case \"5Y\":\n        monthCount = 60;\n        break;\n      case \"MAX\":\n        // 找出最早的歷史記錄\n        if (historyData && historyData.length > 0) {\n          const earliest = new Date(historyData[0].recordedAt);\n          const diffMonths = (now.getFullYear() - earliest.getFullYear()) * 12 + \n                           (now.getMonth() - earliest.getMonth());\n          monthCount = Math.max(diffMonths + 1, 3);\n        } else {\n          monthCount = 3;\n        }\n        break;\n    }\n    \n    // 生成每個月的數據點\n    for (let i = monthCount - 1; i >= 0; i--) {\n      const targetDate = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthEnd = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0); // 月底\n      const dateLabel = `${targetDate.getFullYear()}/${targetDate.getMonth() + 1}`;\n      \n      let value = 0;\n      \n      if (historyData) {\n        // 找出該月底或之前最近的歷史記錄\n        const relevantHistory = historyData\n          .filter(h => {\n            const recordDate = new Date(h.recordedAt);\n            return recordDate <= monthEnd;\n          })\n          .sort((a, b) => new Date(b.recordedAt).getTime() - new Date(a.recordedAt).getTime());\n        \n        if (relevantHistory.length > 0) {\n          value = parseFloat(relevantHistory[0].totalNetWorth);\n        }\n      }\n      \n      // 如果是本月，使用當前淨值\n      if (targetDate.getFullYear() === now.getFullYear() && \n          targetDate.getMonth() === now.getMonth()) {\n        value = currentNetWorth;\n      }\n      \n      months.push({ \n        date: timeRange === \"1Y\" || timeRange === \"5Y\" || timeRange === \"MAX\" \n          ? dateLabel \n          : `${targetDate.getMonth() + 1}月`, \n        value \n      });\n    }\n    \n    return months;\n  }, [historyData, timeRange, currentNetWorth]);\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-semibold mb-3\">資產走勢</h3>\n        <div className=\"flex gap-1 overflow-x-auto pb-2\">\n          {([\"1M\", \"3M\", \"6M\", \"1Y\", \"5Y\", \"MAX\"] as TimeRange[]).map((range) => (\n            <Button\n              key={range}\n              size=\"sm\"\n              variant={timeRange === range ? \"default\" : \"outline\"}\n              onClick={() => setTimeRange(range)}\n              data-testid={`button-${range}`}\n              className=\"flex-shrink-0\"\n            >\n              {range}\n            </Button>\n          ))}\n        </div>\n      </div>\n      {chartData.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">暫無資產歷史數據</p>\n        </div>\n      ) : (\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <LineChart data={chartData}>\n            <defs>\n              <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0.3} />\n                <stop offset=\"95%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <XAxis\n              dataKey=\"date\"\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            <YAxis\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) => `${(value / 10000).toFixed(0)}萬`}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--card))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"0.5rem\",\n              }}\n              formatter={(value: number) => [`NT$ ${value.toLocaleString()}`, \"資產總額\"]}\n            />\n            <Area type=\"monotone\" dataKey=\"value\" stroke=\"none\" fill=\"url(#colorValue)\" />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke=\"hsl(var(--primary))\"\n              strokeWidth={2.5}\n              dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6480},"server/exchangeRates.ts":{"content":"// Exchange rate service - fetches real-time rates from exchangerate-api.com (free tier)\nconst CACHE_DURATION = 3600000; // 1 hour in milliseconds\n\ninterface ExchangeRates {\n  [currency: string]: number;\n}\n\nlet cachedRates: ExchangeRates = {\n  TWD: 1,\n  USD: 30,\n  JPY: 0.2,\n  EUR: 33,\n  GBP: 38,\n  CNY: 4.3,\n  HKD: 3.8,\n};\n\nlet lastFetch = 0;\n\nexport async function getExchangeRates(): Promise<ExchangeRates> {\n  const now = Date.now();\n  \n  // Return cached rates if still fresh\n  if (now - lastFetch < CACHE_DURATION) {\n    return cachedRates;\n  }\n\n  try {\n    // Using exchangerate-api.com free tier (no API key needed for basic usage)\n    const response = await fetch('https://open.er-api.com/v6/latest/TWD');\n    \n    if (!response.ok) {\n      console.warn('Failed to fetch exchange rates, using cached values');\n      return cachedRates;\n    }\n\n    const data = await response.json();\n    \n    if (data.rates) {\n      // Convert from TWD base to rates against TWD\n      const rates: ExchangeRates = {\n        TWD: 1,\n      };\n      \n      // Calculate inverse rates (how many TWD per 1 unit of foreign currency)\n      const currencies = ['USD', 'JPY', 'EUR', 'GBP', 'CNY', 'HKD'];\n      for (const currency of currencies) {\n        if (data.rates[currency]) {\n          rates[currency] = 1 / data.rates[currency];\n        }\n      }\n      \n      cachedRates = rates;\n      lastFetch = now;\n      console.log('Exchange rates updated:', rates);\n    }\n  } catch (error) {\n    console.error('Error fetching exchange rates:', error);\n  }\n\n  return cachedRates;\n}\n\nexport function getExchangeRate(currency: string): number {\n  return cachedRates[currency] || 1;\n}\n","size_bytes":1664},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/examples/BottomNav.tsx":{"content":"import BottomNav from '../BottomNav';\nimport { Route, Switch } from 'wouter';\n\nexport default function BottomNavExample() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" component={() => <div className=\"p-4\">Asset Overview Page</div>} />\n        <Route path=\"/cash-flow\" component={() => <div className=\"p-4\">Cash Flow Page</div>} />\n        <Route path=\"/ledger\" component={() => <div className=\"p-4\">Ledger Page</div>} />\n        <Route path=\"/investment\" component={() => <div className=\"p-4\">Investment Page</div>} />\n        <Route path=\"/settings\" component={() => <div className=\"p-4\">Settings Page</div>} />\n      </Switch>\n      <BottomNav />\n    </>\n  );\n}\n","size_bytes":678},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/LedgerEntry.tsx":{"content":"import { ShoppingCart, Coffee, Home, Car, Gift, DollarSign } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface LedgerEntryProps {\n  type: \"income\" | \"expense\";\n  amount: number;\n  originalAmount?: number;\n  currency?: string;\n  category: string;\n  account: string;\n  date: string;\n  note?: string;\n}\n\nconst categoryIcons: Record<string, any> = {\n  購物: ShoppingCart,\n  餐飲: Coffee,\n  房租: Home,\n  交通: Car,\n  禮物: Gift,\n  薪資: DollarSign,\n};\n\nconst categoryColors: Record<string, string> = {\n  購物: \"hsl(var(--chart-1))\",\n  餐飲: \"hsl(var(--chart-2))\",\n  房租: \"hsl(var(--chart-3))\",\n  交通: \"hsl(var(--chart-4))\",\n  禮物: \"hsl(var(--chart-5))\",\n  薪資: \"hsl(var(--chart-3))\",\n};\n\nexport default function LedgerEntry({\n  type,\n  amount,\n  originalAmount,\n  currency = \"TWD\",\n  category,\n  account,\n  date,\n  note,\n}: LedgerEntryProps) {\n  const Icon = categoryIcons[category] || DollarSign;\n  const color = categoryColors[category] || \"hsl(var(--chart-1))\";\n  \n  // 如果是外幣，顯示原幣別金額和台幣金額\n  const showOriginalCurrency = currency !== \"TWD\" && originalAmount !== undefined;\n\n  return (\n    <div\n      className=\"flex items-center gap-4 p-4 border-b last:border-b-0\"\n      data-testid={`ledger-entry-${category}`}\n    >\n      <div\n        className=\"flex items-center justify-center w-10 h-10 rounded-full\"\n        style={{ backgroundColor: `${color}20` }}\n      >\n        <Icon className=\"w-5 h-5\" style={{ color }} />\n      </div>\n      <div className=\"flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <p className=\"font-medium\">{category}</p>\n          {note && (\n            <span className=\"text-xs text-muted-foreground\">· {note}</span>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2 mt-1\">\n          <span className=\"text-xs text-muted-foreground\">{account}</span>\n          <span className=\"text-xs text-muted-foreground\">·</span>\n          <span className=\"text-xs text-muted-foreground\">{date}</span>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        {showOriginalCurrency && (\n          <div className=\"text-xs text-muted-foreground mb-1\">\n            {type === \"income\" ? \"+\" : \"-\"}{currency} {originalAmount.toLocaleString()}\n          </div>\n        )}\n        <div\n          className={`text-lg font-semibold ${\n            type === \"income\" ? \"text-chart-3\" : \"text-foreground\"\n          }`}\n        >\n          {type === \"income\" ? \"+\" : \"-\"}NT$ {amount.toLocaleString()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2641},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/AddAssetDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAssetAccountSchema } from \"@shared/schema\";\nimport type { InsertAssetAccount } from \"@shared/schema\";\nimport { useCreateAsset } from \"@/hooks/useAssets\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus } from \"lucide-react\";\n\nconst assetTypes = [\"台幣\", \"美元\", \"日幣\", \"台股\", \"美股\", \"加密貨幣\", \"房地產\"];\nconst banks = {\n  台幣: [\"中國信託\", \"國泰世華\", \"台新銀行\", \"玉山銀行\", \"第一銀行\"],\n  美元: [\"Firstrade\", \"TD Ameritrade\", \"Interactive Brokers\"],\n  日幣: [\"中國信託\", \"國泰世華\"],\n  台股: [\"富邦證券\", \"元大證券\", \"凱基證券\"],\n  美股: [\"Firstrade\", \"TD Ameritrade\", \"Charles Schwab\"],\n  加密貨幣: [\"Binance\", \"MAX\", \"Coinbase\"],\n  房地產: [\"自有\", \"其他\"],\n};\n\nexport default function AddAssetDialog() {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const createAsset = useCreateAsset();\n\n  const form = useForm<InsertAssetAccount>({\n    resolver: zodResolver(insertAssetAccountSchema),\n    defaultValues: {\n      type: \"\",\n      bankOrBroker: \"\",\n      accountName: \"\",\n      balance: \"0\",\n      currency: \"TWD\",\n      exchangeRate: \"1\",\n    },\n  });\n\n  const selectedType = form.watch(\"type\");\n\n  const onSubmit = async (data: InsertAssetAccount) => {\n    try {\n      await createAsset.mutateAsync(data);\n      toast({\n        title: \"成功\",\n        description: \"資產已新增\",\n      });\n      setOpen(false);\n      form.reset();\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"新增資產失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button size=\"sm\" data-testid=\"button-add-asset\">\n          <Plus className=\"w-4 h-4 mr-1\" />\n          新增資產\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>新增資產</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>資產類型</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-asset-type\">\n                        <SelectValue placeholder=\"選擇類型\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {assetTypes.map((type) => (\n                        <SelectItem key={type} value={type}>\n                          {type}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"bankOrBroker\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>銀行/券商</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    value={field.value}\n                    disabled={!selectedType}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-bank\">\n                        <SelectValue placeholder=\"選擇銀行/券商\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {selectedType &&\n                        banks[selectedType as keyof typeof banks]?.map((bank) => (\n                          <SelectItem key={bank} value={bank}>\n                            {bank}\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"accountName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>帳戶名稱（選填）</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"例如：薪轉戶\" data-testid=\"input-account-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"balance\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>餘額</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      {...field}\n                      data-testid=\"input-balance\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"currency\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>幣別</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"TWD\">台幣 (TWD)</SelectItem>\n                      <SelectItem value=\"USD\">美元 (USD)</SelectItem>\n                      <SelectItem value=\"JPY\">日幣 (JPY)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.watch(\"currency\") !== \"TWD\" && (\n              <FormField\n                control={form.control}\n                name=\"exchangeRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>匯率（轉換為台幣）</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.0001\"\n                        {...field}\n                        data-testid=\"input-exchange-rate\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1\"\n              >\n                取消\n              </Button>\n              <Button type=\"submit\" className=\"flex-1\" disabled={createAsset.isPending}>\n                {createAsset.isPending ? \"新增中...\" : \"新增\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7976},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/hooks/useBudget.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Budget } from \"@shared/schema\";\n\nexport function useBudget(month: string) {\n  return useQuery<Budget | null>({\n    queryKey: [\"/api/budgets\", month],\n    queryFn: async () => {\n      const response = await fetch(`/api/budgets/${month}`);\n      if (response.status === 404) return null;\n      if (!response.ok) throw new Error(\"Failed to fetch budget\");\n      return response.json();\n    },\n  });\n}\n","size_bytes":462},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"light\";\n    const initialTheme = savedTheme || systemTheme;\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"切換深色模式\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1188},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/examples/AssetTrendChart.tsx":{"content":"import AssetTrendChart from '../AssetTrendChart';\n\nexport default function AssetTrendChartExample() {\n  return <AssetTrendChart />;\n}\n","size_bytes":134},"client/src/components/BudgetAllocationSlider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { useCreateBudgetCategory, useUpdateBudgetCategory, useDeleteBudgetCategory } from \"@/hooks/useBudgetCategories\";\nimport type { BudgetCategory } from \"@shared/schema\";\n\ninterface BudgetAllocationSliderProps {\n  title?: string;\n  totalAmount: number;\n  budgetId?: string;\n  categories: BudgetCategory[];\n  type: \"fixed\" | \"extra\";\n}\n\nconst categoryColors = [\n  \"#F7F9F9\", // Mist White\n  \"#E4F1F6\", // Cloud Blue\n  \"#D9F2E6\", // Mint Cream\n  \"#BEE3F8\", // Sky Blue\n  \"#A8E6CF\", // Pale Aqua\n  \"#C7CEEA\", // Lavender Gray\n  \"#FDE2E4\", // Blush Pink\n  \"#F6E7CB\", // Sand Beige\n];\n\n// 生成同類型但不同的顏色（超過8種時使用）\nconst generateSimilarColor = (index: number) => {\n  const baseIndex = index % 8;\n  const baseColor = categoryColors[baseIndex];\n  const variation = Math.floor(index / 8) * 15;\n  \n  // 將hex轉rgb並微調\n  const hex = baseColor.replace('#', '');\n  const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) - variation));\n  const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) - variation));\n  const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) - variation));\n  \n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\nexport default function BudgetAllocationSlider({\n  title = \"預算分配\",\n  totalAmount,\n  budgetId,\n  categories,\n  type,\n}: BudgetAllocationSliderProps) {\n  const [localCategories, setLocalCategories] = useState(\n    categories.filter(c => c.type === type)\n  );\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const createCategory = useCreateBudgetCategory();\n  const updateCategory = useUpdateBudgetCategory();\n  const deleteCategory = useDeleteBudgetCategory();\n\n  useEffect(() => {\n    setLocalCategories(categories.filter(c => c.type === type));\n  }, [categories, type]);\n\n  const handleSliderChange = (id: string, value: number[]) => {\n    const newValue = value[0];\n    \n    // Update local state immediately (不排序)\n    setLocalCategories((prev) =>\n      prev.map((cat) =>\n        cat.id === id ? { ...cat, percentage: newValue } : cat\n      )\n    );\n  };\n\n  const handleSliderCommit = async (id: string, value: number[]) => {\n    const newValue = value[0];\n    \n    // Update server when user finishes dragging\n    await updateCategory.mutateAsync({\n      id,\n      data: { percentage: newValue },\n    });\n  };\n\n  const handleAddCategory = async () => {\n    if (!budgetId || !newCategoryName.trim()) return;\n\n    // 檢查類別名稱是否在固定或額外分配中已存在\n    const existingCategory = categories.find(c => c.name === newCategoryName);\n    \n    let color: string;\n    \n    if (existingCategory) {\n      // 如果類別已存在，使用相同顏色\n      color = existingCategory.color;\n    } else {\n      // 如果類別不存在，選擇新顏色（不與已有顏色重複）\n      const usedColors = new Set(categories.map(c => c.color));\n      \n      // 先從8種基礎顏色中找未使用的\n      let foundColor = categoryColors.find(c => !usedColors.has(c));\n      \n      if (!foundColor) {\n        // 如果8種基礎顏色都用完了，生成新顏色直到找到未使用的\n        let colorIndex = categories.length;\n        do {\n          foundColor = generateSimilarColor(colorIndex);\n          colorIndex++;\n        } while (usedColors.has(foundColor) && colorIndex < 100);\n      }\n      \n      color = foundColor || categoryColors[0]; // 最後的保底顏色\n    }\n\n    await createCategory.mutateAsync({\n      budgetId,\n      data: {\n        name: newCategoryName,\n        type,\n        percentage: 0,\n        color,\n      },\n    });\n\n    setNewCategoryName(\"\");\n    setDialogOpen(false);\n  };\n\n  const handleDeleteCategory = async (id: string) => {\n    await deleteCategory.mutateAsync(id);\n  };\n\n  const total = localCategories.reduce(\n    (sum, cat) => sum + (cat.percentage || 0),\n    0\n  );\n\n  // 按百分比大到小排序（只在顯示時排序，不改變 localCategories）\n  const sortedCategories = [...localCategories].sort((a, b) => {\n    return (b.percentage || 0) - (a.percentage || 0);\n  });\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            可分配金額: NT$ {totalAmount.toLocaleString()}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div\n            className={`text-lg font-bold ${\n              total > 100 ? \"text-destructive\" : \"text-primary\"\n            }`}\n          >\n            {total}%\n          </div>\n          {budgetId && (\n            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" variant=\"outline\" data-testid={`button-add-category-${type}`}>\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  新增類別\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>新增分配類別</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"category-name\">類別名稱</Label>\n                    <Input\n                      id=\"category-name\"\n                      value={newCategoryName}\n                      onChange={(e) => setNewCategoryName(e.target.value)}\n                      placeholder=\"例如：投資、娛樂、儲蓄\"\n                      data-testid={`input-category-name-${type}`}\n                    />\n                  </div>\n                  <Button\n                    onClick={handleAddCategory}\n                    className=\"w-full\"\n                    disabled={!newCategoryName.trim()}\n                    data-testid={`button-submit-category-${type}`}\n                  >\n                    新增\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </div>\n\n      {sortedCategories.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground mb-4\">尚未建立分配類別</p>\n          {budgetId && (\n            <Button variant=\"outline\" onClick={() => setDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-1\" />\n              新增第一個類別\n            </Button>\n          )}\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {sortedCategories.map((category) => {\n            const percentage = category.percentage || 0;\n            return (\n              <div key={category.id} className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-sm border border-border\"\n                      style={{ backgroundColor: category.color }}\n                    />\n                    <span className=\"text-sm font-medium\">{category.name}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-semibold w-16 text-right\">\n                      {percentage}%\n                    </span>\n                    <span className=\"text-sm text-muted-foreground w-24 text-right\">\n                      NT$ {((totalAmount * percentage) / 100).toLocaleString()}\n                    </span>\n                    {budgetId && (\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleDeleteCategory(category.id)}\n                        data-testid={`button-delete-${category.name}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                <Slider\n                  value={[percentage]}\n                  onValueChange={(value) => handleSliderChange(category.id, value)}\n                  onValueCommit={(value) => handleSliderCommit(category.id, value)}\n                  max={100}\n                  step={5}\n                  className=\"w-full\"\n                  data-testid={`slider-${category.name}`}\n                  disabled={!budgetId}\n                />\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {total !== 100 && sortedCategories.length > 0 && (\n        <p className=\"text-sm text-muted-foreground mt-4 text-center\">\n          {total < 100 ? `還有 ${100 - total}% 未分配` : `超出 ${total - 100}%`}\n        </p>\n      )}\n    </Card>\n  );\n}\n","size_bytes":9380},"client/src/components/AssetBreakdownChart.tsx":{"content":"import { Cell, Pie, PieChart, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface AssetBreakdownChartProps {\n  data?: Array<{ name: string; value: number; color: string }>;\n}\n\nexport default function AssetBreakdownChart({ data }: AssetBreakdownChartProps) {\n  const chartData = data || [];\n  const total = chartData.reduce((sum, item) => sum + item.value, 0);\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">資產類別佔比</h3>\n      {chartData.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">尚未新增任何資產</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">請前往帳戶管理新增帳戶</p>\n        </div>\n      ) : (\n        <div className=\"flex flex-col md:flex-row items-center gap-6\">\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <PieChart>\n              <Pie\n                data={chartData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={60}\n                outerRadius={90}\n                paddingAngle={3}\n                dataKey=\"value\"\n              >\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--card))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"0.5rem\",\n                }}\n                formatter={(value: number) => [\n                  `NT$ ${value.toLocaleString()} (${((value / total) * 100).toFixed(1)}%)`,\n                  \"\",\n                ]}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n          <div className=\"flex flex-col gap-2 w-full md:w-auto\">\n            {chartData.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between gap-4\" data-testid={`asset-${item.name}`}>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 rounded-sm\" style={{ backgroundColor: item.color }} />\n                  <span className=\"text-sm text-muted-foreground\">{item.name}</span>\n                </div>\n                <span className=\"text-sm font-medium\">\n                  {((item.value / total) * 100).toFixed(1)}%\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":2586},"design_guidelines.md":{"content":"# MoneyTrack Design Guidelines\n\n## Design Approach\n\n**Selected Framework**: Apple Human Interface Guidelines (HIG) with Custom Taiwan-Localized Identity\n\nThe app follows Apple's HIG principles for iOS-optimized experiences, enhanced with a custom color system and Taiwan-specific design elements. This ensures native-feeling interactions while maintaining brand identity for Taiwanese users.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode (Primary)**\n- Primary Blue: 220 88% 63% (#4C7EF3) - Primary actions, key metrics, interactive elements\n- Accent Navy: 215 25% 29% (#3A506B) - Section headers, secondary emphasis\n- Background: 220 20% 98% (#F7F8FA) - App canvas\n- Text Primary: 0 0% 12% (#1E1E1E) - Main content\n- Text Secondary: 0 0% 48% (#7A7A7A) - Descriptions, metadata\n- Border: 0 0% 88% (#E0E0E0) - Dividers, cards\n- Success Green: 142 76% 36% - Profit indicators\n- Error Red: 0 84% 60% - Loss indicators\n\n**Dark Mode**\n- Primary Blue: 220 88% 68% - Slightly lighter for contrast\n- Accent Navy: 215 25% 65% - Brightened for readability\n- Background: 220 15% 10% - Dark canvas\n- Surface: 220 12% 15% - Card/panel backgrounds\n- Text Primary: 0 0% 95% - Main content\n- Text Secondary: 0 0% 65% - Descriptions\n- Border: 0 0% 25% - Subtle dividers\n\n### B. Typography\n\n**Font Stack**\n- Primary: 'Noto Sans TC', -apple-system, sans-serif (body text, UI elements)\n- Secondary: 'PingFang TC', system-ui (alternative for iOS)\n- Display: 'Source Han Sans TC', 'Noto Sans TC' (headings, emphasis)\n\n**Type Scale**\n- Hero Numbers: text-5xl font-bold (48px) - Net worth display\n- Section Headers: text-2xl font-semibold (24px)\n- Card Titles: text-lg font-medium (18px)\n- Body Text: text-base (16px)\n- Captions/Labels: text-sm (14px)\n- Metadata: text-xs (12px)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 3, 4, 6, 8, 12, 16, 20, 24\n- Component padding: p-4 to p-6\n- Section spacing: gap-6 to gap-8\n- Page margins: px-4 md:px-6 lg:px-8\n- Card spacing: p-6\n\n**Container Strategy**\n- Max width: max-w-7xl mx-auto (main container)\n- Dashboard cards: max-w-md to max-w-2xl\n- Tables: w-full with horizontal scroll on mobile\n\n### D. Component Library\n\n**Navigation**\n- Bottom tab bar (iOS style) with 5 tabs\n- Icon + label format, 56px height\n- Active state: Primary blue fill, inactive: text-secondary\n- Safe area padding on iPhone models\n\n**Cards & Surfaces**\n- Rounded corners: rounded-xl (12px)\n- Subtle shadows: shadow-sm (light), border in dark mode\n- Background: white (light) / surface color (dark)\n- Padding: p-6 standard\n\n**Data Visualization**\n- Animated transparent piggy bank icon (SVG with gradient fill showing net worth)\n- Line charts: Smooth curves, primary blue with gradient fill\n- Pie charts: Distinct colors for each category with percentage labels\n- Bar charts: Rounded caps, spacing between bars\n- Tables: Striped rows (optional), sticky headers, right-aligned numbers\n\n**Forms & Inputs**\n- Text fields: rounded-lg, border-2, focus:ring-2 ring-primary\n- Dropdowns: Native iOS select styling with chevron icon\n- Sliders: Custom styled with primary color track, percentage labels\n- Buttons: \n  - Primary: bg-primary text-white rounded-lg px-6 py-3\n  - Secondary: border-2 border-primary text-primary\n  - Icon buttons: rounded-full p-3\n\n**Interactive Elements**\n- Category icons: 48px containers, flat UI style (HeroIcons/Feather)\n- Add buttons: Floating action button (FAB) bottom-right, primary color, rounded-full\n- Toggle switches: iOS native style\n- Date pickers: Calendar modal with month/year selector\n\n### E. Animations & Interactions\n\n**Micro-interactions** (use sparingly)\n- Number count-up animation for net worth display (1-2 second duration)\n- Pie chart segment expand on tap\n- Smooth transitions between month/quarter/year views (300ms ease)\n- Card hover/tap: subtle scale transform (scale-[1.02])\n\n**Page Transitions**\n- Tab switching: Crossfade (200ms)\n- Modal entry: Slide up from bottom (iOS native)\n- Sheet dismissal: Swipe down gesture\n\n---\n\n## Feature-Specific Design\n\n### Asset Overview Dashboard\n- Hero section: Centered piggy bank icon (120px) with net worth below\n- Trend graph: Full-width card, toggle buttons for M/Q/Y above chart\n- Pie chart: 50% width on desktop, full on mobile, legend on right\n- Asset table: Accordion rows by type, expandable to show accounts\n\n### Cash Flow Planner\n- Split layout: Left 40% category list, Right 60% allocation pie chart\n- Sliders: Horizontal with percentage labels, live update pie chart\n- Fixed vs Extra income: Tabbed interface with visual separation\n\n### Ledger\n- Month selector: Horizontal scrollable pill navigation\n- Entry list: Card-based with left-side category icon (colored circle)\n- Quick add: Bottom sheet modal with icon grid selector\n- Summary cards: 3-column grid showing totals, comparisons, balances\n\n### Investment Portfolio\n- Holdings table: Sortable columns, P/L colored cells (green/red)\n- Transaction history: Expandable rows showing details\n- Portfolio pie: Category breakdown with drill-down capability\n\n---\n\n## Taiwan-Specific Touches\n\n- Bank/brokerage logos: Local institutions (CTBC, Cathay, Firstrade) as 32px icons\n- Currency symbols: Show NT$, US$, ¥ prominently\n- Number formatting: Comma separators for Traditional Chinese (12,345.67)\n- Date format: YYYY/MM/DD (Taiwan standard)\n\n---\n\n## Images\n\n**Dashboard Hero**: Animated SVG piggy bank illustration (not raster image)\n- Transparent glass effect with gradient fill indicating net worth level\n- Confetti animation on positive monthly growth\n\n**Onboarding**: Illustration set for feature introduction (SVG)\n- 3-4 simple scenes showing key features\n- Flat style matching primary color palette\n\n**Empty States**: Icon-based illustrations when no data exists\n- Centered 80px icon with descriptive text below\n- Soft gray tone, encouraging action","size_bytes":5845},"client/src/components/TransferDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { ArrowRightLeft } from \"lucide-react\";\nimport type { AssetAccount } from \"@shared/schema\";\n\ninterface TransferDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function TransferDialog({ open, onOpenChange }: TransferDialogProps) {\n  const { toast } = useToast();\n  const { data: accounts } = useAssets();\n  \n  const [fromAccountId, setFromAccountId] = useState(\"\");\n  const [toAccountId, setToAccountId] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!fromAccountId || !toAccountId || !amount) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫所有必填欄位\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (fromAccountId === toAccountId) {\n      toast({\n        title: \"錯誤\",\n        description: \"轉出和轉入帳戶不能相同\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(amount) <= 0) {\n      toast({\n        title: \"錯誤\",\n        description: \"轉帳金額必須大於 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      const response = await fetch(\"/api/transfer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          fromAccountId,\n          toAccountId,\n          amount,\n          note,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Transfer failed\");\n      }\n\n      toast({\n        title: \"轉帳成功\",\n        description: \"轉帳交易已完成並記錄到記帳本\",\n      });\n\n      // Reset form\n      setFromAccountId(\"\");\n      setToAccountId(\"\");\n      setAmount(\"\");\n      setNote(\"\");\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ledger\"] });\n      \n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"轉帳失敗\",\n        description: error instanceof Error ? error.message : \"請稍後再試\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const fromAccount = accounts?.find(a => a.id === fromAccountId);\n  const toAccount = accounts?.find(a => a.id === toAccountId);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <ArrowRightLeft className=\"w-5 h-5\" />\n            轉帳\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fromAccount\">轉出帳戶 *</Label>\n            <Select value={fromAccountId} onValueChange={setFromAccountId}>\n              <SelectTrigger id=\"fromAccount\" data-testid=\"select-from-account\">\n                <SelectValue placeholder=\"選擇轉出帳戶\" />\n              </SelectTrigger>\n              <SelectContent>\n                {accounts?.map((account) => (\n                  <SelectItem key={account.id} value={account.id}>\n                    {account.type} - {account.accountName} \n                    ({account.currency} {parseFloat(account.balance).toLocaleString()})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"toAccount\">轉入帳戶 *</Label>\n            <Select value={toAccountId} onValueChange={setToAccountId}>\n              <SelectTrigger id=\"toAccount\" data-testid=\"select-to-account\">\n                <SelectValue placeholder=\"選擇轉入帳戶\" />\n              </SelectTrigger>\n              <SelectContent>\n                {accounts?.map((account) => (\n                  <SelectItem key={account.id} value={account.id}>\n                    {account.type} - {account.accountName}\n                    ({account.currency} {parseFloat(account.balance).toLocaleString()})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"amount\">轉帳金額 *</Label>\n            <Input\n              id=\"amount\"\n              type=\"number\"\n              step=\"0.01\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              placeholder=\"輸入金額\"\n              data-testid=\"input-amount\"\n            />\n            {fromAccount && (\n              <p className=\"text-xs text-muted-foreground\">\n                可用餘額: {fromAccount.currency} {parseFloat(fromAccount.balance).toLocaleString()}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note\">備註</Label>\n            <Textarea\n              id=\"note\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              placeholder=\"選填\"\n              data-testid=\"input-note\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              取消\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              data-testid=\"button-submit\"\n            >\n              {isSubmitting ? \"處理中...\" : \"確認轉帳\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6591},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/DatePicker.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DatePickerProps {\n  value: string;\n  onChange: (date: string) => void;\n}\n\nexport default function DatePicker({ value, onChange }: DatePickerProps) {\n  const [open, setOpen] = useState(false);\n  \n  const dateValue = value ? new Date(value) : new Date();\n  const [selectedYear, setSelectedYear] = useState(dateValue.getFullYear());\n  const [selectedMonth, setSelectedMonth] = useState(dateValue.getMonth());\n  const [selectedDay, setSelectedDay] = useState(dateValue.getDate());\n\n  const years = Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - 5 + i);\n  const months = [\n    \"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\",\n    \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"\n  ];\n\n  const getDaysInMonth = (year: number, month: number) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  const daysInMonth = getDaysInMonth(selectedYear, selectedMonth);\n  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n\n  const handleConfirm = () => {\n    const date = new Date(selectedYear, selectedMonth, selectedDay);\n    onChange(date.toISOString().split('T')[0]);\n    setOpen(false);\n  };\n\n  const formatDate = (dateStr: string) => {\n    const d = new Date(dateStr);\n    return `${d.getFullYear()}年${d.getMonth() + 1}月${d.getDate()}日`;\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !value && \"text-muted-foreground\"\n          )}\n          data-testid=\"button-date-picker\"\n        >\n          <Calendar className=\"mr-2 h-4 w-4\" />\n          {value ? formatDate(value) : \"選擇日期\"}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-4 max-h-[500px] overflow-y-auto\" align=\"center\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">年份</label>\n            <div className=\"grid grid-cols-5 gap-1\">\n              {years.map((year) => (\n                <Button\n                  key={year}\n                  type=\"button\"\n                  variant={selectedYear === year ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedYear(year)}\n                  className=\"h-8\"\n                >\n                  {year}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">月份</label>\n            <div className=\"grid grid-cols-4 gap-1\">\n              {months.map((month, index) => (\n                <Button\n                  key={month}\n                  type=\"button\"\n                  variant={selectedMonth === index ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedMonth(index)}\n                  className=\"h-8\"\n                >\n                  {month}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">日期</label>\n            <div className=\"grid grid-cols-7 gap-1 max-h-48 overflow-y-auto\">\n              {days.map((day) => (\n                <Button\n                  key={day}\n                  type=\"button\"\n                  variant={selectedDay === day ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedDay(day)}\n                  className=\"h-8\"\n                >\n                  {day}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 pt-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              className=\"flex-1\"\n            >\n              取消\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleConfirm}\n              className=\"flex-1\"\n            >\n              確認\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":4468},"server/storage.ts":{"content":"import {\n  users,\n  assetAccounts,\n  assetHistory,\n  budgets,\n  budgetCategories,\n  budgetItems,\n  ledgerEntries,\n  investmentHoldings,\n  investmentTransactions,\n  savingsJars,\n  savingsJarCategories,\n  savingsJarDeposits,\n  type User,\n  type UpsertUser,\n  type AssetAccount,\n  type InsertAssetAccount,\n  type AssetHistory,\n  type InsertAssetHistory,\n  type Budget,\n  type InsertBudget,\n  type BudgetCategory,\n  type InsertBudgetCategory,\n  type BudgetItem,\n  type InsertBudgetItem,\n  type LedgerEntry,\n  type InsertLedgerEntry,\n  type InvestmentHolding,\n  type InsertInvestmentHolding,\n  type InvestmentTransaction,\n  type InsertInvestmentTransaction,\n  type SavingsJar,\n  type InsertSavingsJar,\n  type SavingsJarCategory,\n  type InsertSavingsJarCategory,\n  type SavingsJarDeposit,\n  type InsertSavingsJarDeposit,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Asset Account operations\n  getAssetAccounts(userId: string): Promise<AssetAccount[]>;\n  createAssetAccount(account: InsertAssetAccount): Promise<AssetAccount>;\n  updateAssetAccount(id: string, account: Partial<InsertAssetAccount>): Promise<AssetAccount>;\n  deleteAssetAccount(id: string): Promise<void>;\n\n  // Asset History operations\n  getAssetHistory(userId: string, startDate?: Date, endDate?: Date): Promise<AssetHistory[]>;\n  createAssetHistory(history: InsertAssetHistory): Promise<AssetHistory>;\n\n  // Budget operations\n  getBudget(userId: string, month: string): Promise<Budget | undefined>;\n  getAllBudgets(userId: string): Promise<Budget[]>;\n  createBudget(budget: InsertBudget): Promise<Budget>;\n  updateBudget(id: string, budget: Partial<InsertBudget>): Promise<Budget>;\n\n  // Budget Category operations\n  getBudgetCategories(budgetId: string): Promise<BudgetCategory[]>;\n  createBudgetCategory(category: InsertBudgetCategory): Promise<BudgetCategory>;\n  updateBudgetCategory(id: string, category: Partial<InsertBudgetCategory>): Promise<BudgetCategory>;\n  deleteBudgetCategory(id: string): Promise<void>;\n\n  // Budget Item operations\n  getBudgetItems(budgetId: string): Promise<BudgetItem[]>;\n  createBudgetItem(item: InsertBudgetItem): Promise<BudgetItem>;\n  updateBudgetItem(id: string, item: Partial<InsertBudgetItem>): Promise<BudgetItem>;\n  deleteBudgetItem(id: string): Promise<void>;\n\n  // Ledger Entry operations\n  getLedgerEntries(userId: string, startDate?: string, endDate?: string): Promise<LedgerEntry[]>;\n  getAllLedgerEntries(userId: string): Promise<LedgerEntry[]>;\n  createLedgerEntry(entry: InsertLedgerEntry): Promise<LedgerEntry>;\n  updateLedgerEntry(id: string, entry: Partial<InsertLedgerEntry>): Promise<LedgerEntry>;\n  deleteLedgerEntry(id: string): Promise<void>;\n\n  // Investment Holding operations\n  getInvestmentHoldings(userId: string): Promise<InvestmentHolding[]>;\n  createInvestmentHolding(holding: InsertInvestmentHolding): Promise<InvestmentHolding>;\n  updateInvestmentHolding(id: string, holding: Partial<InsertInvestmentHolding>): Promise<InvestmentHolding>;\n  deleteInvestmentHolding(id: string): Promise<void>;\n\n  // Investment Transaction operations\n  getInvestmentTransactions(userId: string): Promise<InvestmentTransaction[]>;\n  createInvestmentTransaction(transaction: InsertInvestmentTransaction): Promise<InvestmentTransaction>;\n\n  // Savings Jar operations\n  getSavingsJars(userId: string): Promise<SavingsJar[]>;\n  createSavingsJar(jar: InsertSavingsJar): Promise<SavingsJar>;\n  updateSavingsJar(id: string, jar: Partial<InsertSavingsJar>): Promise<SavingsJar>;\n  deleteSavingsJar(id: string): Promise<void>;\n\n  // Savings Jar Category operations\n  getSavingsJarCategories(jarId: string): Promise<SavingsJarCategory[]>;\n  createSavingsJarCategory(category: InsertSavingsJarCategory): Promise<SavingsJarCategory>;\n  updateSavingsJarCategory(id: string, category: Partial<InsertSavingsJarCategory>): Promise<SavingsJarCategory>;\n  deleteSavingsJarCategory(id: string): Promise<void>;\n\n  // Savings Jar Deposit operations\n  getSavingsJarDeposits(jarId: string): Promise<SavingsJarDeposit[]>;\n  createSavingsJarDeposit(deposit: InsertSavingsJarDeposit): Promise<SavingsJarDeposit>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Asset Account operations\n  async getAssetAccounts(userId: string): Promise<AssetAccount[]> {\n    return await db.select().from(assetAccounts).where(eq(assetAccounts.userId, userId));\n  }\n\n  async createAssetAccount(account: InsertAssetAccount): Promise<AssetAccount> {\n    const [newAccount] = await db.insert(assetAccounts).values(account).returning();\n    return newAccount;\n  }\n\n  async updateAssetAccount(id: string, account: Partial<InsertAssetAccount>): Promise<AssetAccount> {\n    const [updated] = await db\n      .update(assetAccounts)\n      .set({ ...account, updatedAt: new Date() })\n      .where(eq(assetAccounts.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAssetAccount(id: string): Promise<void> {\n    await db.delete(assetAccounts).where(eq(assetAccounts.id, id));\n  }\n\n  // Asset History operations\n  async getAssetHistory(userId: string, startDate?: Date, endDate?: Date): Promise<AssetHistory[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(assetHistory)\n        .where(\n          and(\n            eq(assetHistory.userId, userId),\n            gte(assetHistory.recordedAt, startDate),\n            lte(assetHistory.recordedAt, endDate)\n          )\n        )\n        .orderBy(desc(assetHistory.recordedAt));\n    }\n    \n    return await db\n      .select()\n      .from(assetHistory)\n      .where(eq(assetHistory.userId, userId))\n      .orderBy(desc(assetHistory.recordedAt))\n      .limit(100);\n  }\n\n  async createAssetHistory(history: InsertAssetHistory): Promise<AssetHistory> {\n    const [newHistory] = await db.insert(assetHistory).values(history).returning();\n    return newHistory;\n  }\n\n  // Budget operations\n  async getBudget(userId: string, month: string): Promise<Budget | undefined> {\n    const [budget] = await db\n      .select()\n      .from(budgets)\n      .where(and(eq(budgets.userId, userId), eq(budgets.month, month)));\n    return budget;\n  }\n\n  async getAllBudgets(userId: string): Promise<Budget[]> {\n    return await db\n      .select()\n      .from(budgets)\n      .where(eq(budgets.userId, userId))\n      .orderBy(budgets.month);\n  }\n\n  async createBudget(budget: InsertBudget): Promise<Budget> {\n    const [newBudget] = await db.insert(budgets).values(budget).returning();\n    return newBudget;\n  }\n\n  async updateBudget(id: string, budget: Partial<InsertBudget>): Promise<Budget> {\n    const [updated] = await db\n      .update(budgets)\n      .set({ ...budget, updatedAt: new Date() })\n      .where(eq(budgets.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Budget Category operations\n  async getBudgetCategories(budgetId: string): Promise<BudgetCategory[]> {\n    return await db.select().from(budgetCategories).where(eq(budgetCategories.budgetId, budgetId));\n  }\n\n  async createBudgetCategory(category: InsertBudgetCategory): Promise<BudgetCategory> {\n    const [newCategory] = await db.insert(budgetCategories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateBudgetCategory(id: string, category: Partial<InsertBudgetCategory>): Promise<BudgetCategory> {\n    const [updated] = await db\n      .update(budgetCategories)\n      .set(category)\n      .where(eq(budgetCategories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBudgetCategory(id: string): Promise<void> {\n    await db.delete(budgetCategories).where(eq(budgetCategories.id, id));\n  }\n\n  // Budget Item operations\n  async getBudgetItems(budgetId: string): Promise<BudgetItem[]> {\n    return await db.select().from(budgetItems).where(eq(budgetItems.budgetId, budgetId));\n  }\n\n  async createBudgetItem(item: InsertBudgetItem): Promise<BudgetItem> {\n    const [newItem] = await db.insert(budgetItems).values(item).returning();\n    return newItem;\n  }\n\n  async updateBudgetItem(id: string, item: Partial<InsertBudgetItem>): Promise<BudgetItem> {\n    const [updated] = await db\n      .update(budgetItems)\n      .set(item)\n      .where(eq(budgetItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBudgetItem(id: string): Promise<void> {\n    await db.delete(budgetItems).where(eq(budgetItems.id, id));\n  }\n\n  // Ledger Entry operations\n  async getLedgerEntries(userId: string, startDate?: string, endDate?: string): Promise<LedgerEntry[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(ledgerEntries)\n        .where(\n          and(\n            eq(ledgerEntries.userId, userId),\n            gte(ledgerEntries.date, startDate),\n            lte(ledgerEntries.date, endDate)\n          )\n        )\n        .orderBy(desc(ledgerEntries.date));\n    }\n    \n    return await db\n      .select()\n      .from(ledgerEntries)\n      .where(eq(ledgerEntries.userId, userId))\n      .orderBy(desc(ledgerEntries.date))\n      .limit(100);\n  }\n\n  async getAllLedgerEntries(userId: string): Promise<LedgerEntry[]> {\n    return await db\n      .select()\n      .from(ledgerEntries)\n      .where(eq(ledgerEntries.userId, userId))\n      .orderBy(desc(ledgerEntries.date));\n  }\n\n  async createLedgerEntry(entry: InsertLedgerEntry): Promise<LedgerEntry> {\n    const [newEntry] = await db.insert(ledgerEntries).values(entry).returning();\n    return newEntry;\n  }\n\n  async updateLedgerEntry(id: string, entry: Partial<InsertLedgerEntry>): Promise<LedgerEntry> {\n    const [updated] = await db\n      .update(ledgerEntries)\n      .set(entry)\n      .where(eq(ledgerEntries.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteLedgerEntry(id: string): Promise<void> {\n    await db.delete(ledgerEntries).where(eq(ledgerEntries.id, id));\n  }\n\n  // Investment Holding operations\n  async getInvestmentHoldings(userId: string): Promise<InvestmentHolding[]> {\n    return await db.select().from(investmentHoldings).where(eq(investmentHoldings.userId, userId));\n  }\n\n  async createInvestmentHolding(holding: InsertInvestmentHolding): Promise<InvestmentHolding> {\n    const [newHolding] = await db.insert(investmentHoldings).values(holding).returning();\n    return newHolding;\n  }\n\n  async updateInvestmentHolding(id: string, holding: Partial<InsertInvestmentHolding>): Promise<InvestmentHolding> {\n    const [updated] = await db\n      .update(investmentHoldings)\n      .set({ ...holding, updatedAt: new Date() })\n      .where(eq(investmentHoldings.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteInvestmentHolding(id: string): Promise<void> {\n    await db.delete(investmentHoldings).where(eq(investmentHoldings.id, id));\n  }\n\n  // Investment Transaction operations\n  async getInvestmentTransactions(userId: string): Promise<InvestmentTransaction[]> {\n    return await db\n      .select()\n      .from(investmentTransactions)\n      .where(eq(investmentTransactions.userId, userId))\n      .orderBy(desc(investmentTransactions.transactionDate));\n  }\n\n  async createInvestmentTransaction(transaction: InsertInvestmentTransaction): Promise<InvestmentTransaction> {\n    const [newTransaction] = await db.insert(investmentTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  // Savings Jar operations\n  async getSavingsJars(userId: string): Promise<SavingsJar[]> {\n    return await db.select().from(savingsJars).where(eq(savingsJars.userId, userId));\n  }\n\n  async createSavingsJar(jar: InsertSavingsJar): Promise<SavingsJar> {\n    const [newJar] = await db.insert(savingsJars).values(jar).returning();\n    return newJar;\n  }\n\n  async updateSavingsJar(id: string, jar: Partial<InsertSavingsJar>): Promise<SavingsJar> {\n    const [updated] = await db\n      .update(savingsJars)\n      .set({ ...jar, updatedAt: new Date() })\n      .where(eq(savingsJars.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSavingsJar(id: string): Promise<void> {\n    await db.delete(savingsJars).where(eq(savingsJars.id, id));\n  }\n\n  // Savings Jar Category operations\n  async getSavingsJarCategories(jarId: string): Promise<SavingsJarCategory[]> {\n    return await db.select().from(savingsJarCategories).where(eq(savingsJarCategories.jarId, jarId));\n  }\n\n  async createSavingsJarCategory(category: InsertSavingsJarCategory): Promise<SavingsJarCategory> {\n    const [newCategory] = await db.insert(savingsJarCategories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateSavingsJarCategory(id: string, category: Partial<InsertSavingsJarCategory>): Promise<SavingsJarCategory> {\n    const [updated] = await db\n      .update(savingsJarCategories)\n      .set(category)\n      .where(eq(savingsJarCategories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteSavingsJarCategory(id: string): Promise<void> {\n    await db.delete(savingsJarCategories).where(eq(savingsJarCategories.id, id));\n  }\n\n  // Savings Jar Deposit operations\n  async getSavingsJarDeposits(jarId: string): Promise<SavingsJarDeposit[]> {\n    return await db.select().from(savingsJarDeposits).where(eq(savingsJarDeposits.jarId, jarId));\n  }\n\n  async createSavingsJarDeposit(deposit: InsertSavingsJarDeposit): Promise<SavingsJarDeposit> {\n    const [newDeposit] = await db.insert(savingsJarDeposits).values(deposit).returning();\n    \n    // Update jar's current amount\n    const [jar] = await db.select().from(savingsJars).where(eq(savingsJars.id, deposit.jarId));\n    if (jar) {\n      await db\n        .update(savingsJars)\n        .set({ \n          currentAmount: (parseFloat(jar.currentAmount) + parseFloat(deposit.amount)).toString(),\n          updatedAt: new Date()\n        })\n        .where(eq(savingsJars.id, deposit.jarId));\n    }\n    \n    return newDeposit;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14486},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/InvestmentHoldingsTable.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface Holding {\n  ticker: string;\n  type: string;\n  quantity: number;\n  costPerShare: number;\n  currentPrice: number;\n}\n\ninterface InvestmentHoldingsTableProps {\n  holdings?: Holding[];\n}\n\nexport default function InvestmentHoldingsTable({\n  holdings: initialHoldings,\n}: InvestmentHoldingsTableProps) {\n  //todo: remove mock functionality\n  const defaultHoldings: Holding[] = [\n    { ticker: \"2330.TW\", type: \"台股\", quantity: 10, costPerShare: 580, currentPrice: 620 },\n    { ticker: \"AAPL\", type: \"美股\", quantity: 5, costPerShare: 180, currentPrice: 175 },\n    { ticker: \"TSLA\", type: \"美股\", quantity: 3, costPerShare: 250, currentPrice: 265 },\n    { ticker: \"BTC\", type: \"加密貨幣\", quantity: 0.05, costPerShare: 900000, currentPrice: 950000 },\n  ];\n\n  const holdings = initialHoldings || defaultHoldings;\n\n  const calculatePL = (holding: Holding) => {\n    const totalCost = holding.quantity * holding.costPerShare;\n    const currentValue = holding.quantity * holding.currentPrice;\n    const pl = currentValue - totalCost;\n    const plPercent = (pl / totalCost) * 100;\n    return { pl, plPercent };\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">持倉明細</h3>\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"min-w-[100px]\">標的</TableHead>\n              <TableHead>類型</TableHead>\n              <TableHead className=\"text-right\">數量</TableHead>\n              <TableHead className=\"text-right\">成本</TableHead>\n              <TableHead className=\"text-right\">現值</TableHead>\n              <TableHead className=\"text-right\">損益</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {holdings.map((holding, idx) => {\n              const { pl, plPercent } = calculatePL(holding);\n              const isProfit = pl >= 0;\n              \n              return (\n                <TableRow key={idx} data-testid={`holding-${holding.ticker}`}>\n                  <TableCell className=\"font-medium\">{holding.ticker}</TableCell>\n                  <TableCell>{holding.type}</TableCell>\n                  <TableCell className=\"text-right\">{holding.quantity}</TableCell>\n                  <TableCell className=\"text-right\">\n                    ${holding.costPerShare.toLocaleString()}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    ${holding.currentPrice.toLocaleString()}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div\n                      className={`flex items-center justify-end gap-1 ${\n                        isProfit ? \"text-chart-3\" : \"text-destructive\"\n                      }`}\n                    >\n                      {isProfit ? (\n                        <TrendingUp className=\"w-4 h-4\" />\n                      ) : (\n                        <TrendingDown className=\"w-4 h-4\" />\n                      )}\n                      <span className=\"font-semibold\">\n                        {isProfit ? \"+\" : \"\"}\n                        {pl.toLocaleString()}\n                      </span>\n                      <span className=\"text-xs\">({plPercent.toFixed(1)}%)</span>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3708},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/Settings.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ChevronRight, User, Globe, DollarSign, Bell, Lock, HelpCircle } from \"lucide-react\";\n\nexport default function Settings() {\n  return (\n    <div className=\"min-h-screen pb-20 bg-background\">\n      <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b\">\n        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\n          <h1 className=\"text-xl font-bold\">設定</h1>\n          <ThemeToggle />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">帳戶設定</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 hover-elevate rounded-lg cursor-pointer\" data-testid=\"button-profile\">\n              <div className=\"flex items-center gap-3\">\n                <User className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"font-medium\">個人資料</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n            <div className=\"flex items-center justify-between p-3 hover-elevate rounded-lg cursor-pointer\" data-testid=\"button-security\">\n              <div className=\"flex items-center gap-3\">\n                <Lock className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"font-medium\">安全性</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">偏好設定</h3>\n          <div className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"language\" className=\"flex items-center gap-2\">\n                <Globe className=\"w-4 h-4 text-muted-foreground\" />\n                語言\n              </Label>\n              <Select defaultValue=\"zh-TW\">\n                <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"zh-TW\">繁體中文</SelectItem>\n                  <SelectItem value=\"en\">English</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currency\" className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                預設幣別\n              </Label>\n              <Select defaultValue=\"TWD\">\n                <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"TWD\">台幣 (TWD)</SelectItem>\n                  <SelectItem value=\"USD\">美元 (USD)</SelectItem>\n                  <SelectItem value=\"JPY\">日幣 (JPY)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 hover-elevate rounded-lg cursor-pointer\" data-testid=\"button-notifications\">\n              <div className=\"flex items-center gap-3\">\n                <Bell className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"font-medium\">通知設定</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">其他</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 hover-elevate rounded-lg cursor-pointer\" data-testid=\"button-help\">\n              <div className=\"flex items-center gap-3\">\n                <HelpCircle className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"font-medium\">說明與回饋</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n            <Button \n              variant=\"destructive\" \n              className=\"w-full\" \n              data-testid=\"button-logout\"\n              onClick={() => window.location.href = \"/api/logout\"}\n            >\n              登出\n            </Button>\n          </div>\n        </Card>\n\n        <div className=\"text-center text-sm text-muted-foreground\">\n          <p>錢跡 MoneyTrack v1.0.0</p>\n          <p className=\"mt-1\">Track your money, shape your future</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5005},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport BottomNav from \"@/components/BottomNav\";\nimport Landing from \"@/pages/Landing\";\nimport AssetOverview from \"@/pages/AssetOverview\";\nimport CashFlowPlanner from \"@/pages/CashFlowPlanner\";\nimport Ledger from \"@/pages/Ledger\";\nimport Investment from \"@/pages/Investment\";\nimport Settings from \"@/pages/Settings\";\nimport AccountManagement from \"@/pages/AccountManagement\";\nimport AccountForm from \"@/pages/AccountForm\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">載入中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Landing />;\n  }\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" component={AssetOverview} />\n        <Route path=\"/cash-flow\" component={CashFlowPlanner} />\n        <Route path=\"/ledger\" component={Ledger} />\n        <Route path=\"/investment\" component={Investment} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/account-management\" component={AccountManagement} />\n        <Route path=\"/account-management/add\" component={AccountForm} />\n        <Route path=\"/account-management/edit/:id\" component={AccountForm} />\n      </Switch>\n      <BottomNav />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2110},"client/src/components/BottomNav.tsx":{"content":"import { Home, TrendingUp, BookOpen, PieChart, Settings } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst navItems = [\n  { path: \"/\", icon: Home, label: \"資產總覽\" },\n  { path: \"/cash-flow\", icon: TrendingUp, label: \"現金流規劃\" },\n  { path: \"/ledger\", icon: BookOpen, label: \"記帳本\" },\n  { path: \"/investment\", icon: PieChart, label: \"投資組合\" },\n  { path: \"/settings\", icon: Settings, label: \"設定\" },\n];\n\nexport default function BottomNav() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-background border-t border-border pb-safe z-50\">\n      <div className=\"flex items-center justify-around h-16 max-w-7xl mx-auto\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <button\n              key={item.path}\n              onClick={() => setLocation(item.path)}\n              data-testid={`nav-${item.label}`}\n              className={`flex flex-col items-center justify-center flex-1 h-full transition-colors ${\n                isActive ? \"text-primary\" : \"text-muted-foreground\"\n              }`}\n            >\n              <Icon className={`w-5 h-5 mb-1 ${isActive ? \"fill-primary/20\" : \"\"}`} />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { getExchangeRates } from \"./exchangeRates\";\nimport {\n  insertAssetAccountSchema,\n  insertAssetHistorySchema,\n  insertBudgetSchema,\n  insertBudgetCategorySchema,\n  insertBudgetItemSchema,\n  insertLedgerEntrySchema,\n  insertInvestmentHoldingSchema,\n  insertInvestmentTransactionSchema,\n  insertSavingsJarSchema,\n  insertSavingsJarCategorySchema,\n  insertSavingsJarDepositSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Exchange rates endpoint\n  app.get('/api/exchange-rates', async (req, res) => {\n    try {\n      const rates = await getExchangeRates();\n      res.json(rates);\n    } catch (error) {\n      console.error(\"Error fetching exchange rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch exchange rates\" });\n    }\n  });\n\n  // Transfer endpoint\n  app.post('/api/transfer', isAuthenticated, async (req: any, res) => {\n    try {\n      const { fromAccountId, toAccountId, amount, note } = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!fromAccountId || !toAccountId || !amount) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get both accounts\n      const accounts = await storage.getAssetAccounts(userId);\n      const fromAccount = accounts.find(a => a.id === fromAccountId);\n      const toAccount = accounts.find(a => a.id === toAccountId);\n\n      if (!fromAccount || !toAccount) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n\n      const transferAmount = parseFloat(amount);\n      const fromBalance = parseFloat(fromAccount.balance);\n\n      if (fromBalance < transferAmount) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n\n      // Update account balances\n      await storage.updateAssetAccount(fromAccountId, {\n        ...fromAccount,\n        balance: (fromBalance - transferAmount).toString(),\n      });\n\n      const toBalance = parseFloat(toAccount.balance);\n      await storage.updateAssetAccount(toAccountId, {\n        ...toAccount,\n        balance: (toBalance + transferAmount).toString(),\n      });\n\n      // Create ledger entries for the transfer\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Transfer out entry (expense)\n      await storage.createLedgerEntry({\n        userId,\n        type: \"expense\",\n        amount: amount,\n        category: \"轉帳\",\n        accountId: fromAccountId,\n        date: today,\n        note: note || `轉帳至 ${toAccount.accountName}`,\n      });\n\n      // Transfer in entry (income)\n      await storage.createLedgerEntry({\n        userId,\n        type: \"income\",\n        amount: amount,\n        category: \"轉帳\",\n        accountId: toAccountId,\n        date: today,\n        note: note || `從 ${fromAccount.accountName} 轉入`,\n      });\n\n      res.json({ message: \"Transfer successful\" });\n    } catch (error) {\n      console.error(\"Error processing transfer:\", error);\n      res.status(500).json({ message: \"Failed to process transfer\" });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Asset Account routes\n  app.get('/api/assets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accounts = await storage.getAssetAccounts(userId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching assets:\", error);\n      res.status(500).json({ message: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.post('/api/assets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertAssetAccountSchema.parse({ ...req.body, userId });\n      const account = await storage.createAssetAccount(data);\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error creating asset:\", error);\n      res.status(400).json({ message: \"Failed to create asset\" });\n    }\n  });\n\n  app.patch('/api/assets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      // Ensure userId is preserved in the update\n      const updateData = { ...req.body, userId };\n      const account = await storage.updateAssetAccount(id, updateData);\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error updating asset:\", error);\n      res.status(400).json({ message: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete('/api/assets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteAssetAccount(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting asset:\", error);\n      res.status(400).json({ message: \"Failed to delete asset\" });\n    }\n  });\n\n  // Asset History routes\n  app.get('/api/asset-history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { startDate, endDate } = req.query;\n      const history = await storage.getAssetHistory(\n        userId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching asset history:\", error);\n      res.status(500).json({ message: \"Failed to fetch asset history\" });\n    }\n  });\n\n  app.post('/api/asset-history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertAssetHistorySchema.parse({ ...req.body, userId });\n      const history = await storage.createAssetHistory(data);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error creating asset history:\", error);\n      res.status(400).json({ message: \"Failed to create asset history\" });\n    }\n  });\n\n  // Budget routes\n  app.get('/api/budgets/:month', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { month } = req.params;\n      const budget = await storage.getBudget(userId, month);\n      res.json(budget);\n    } catch (error) {\n      console.error(\"Error fetching budget:\", error);\n      res.status(500).json({ message: \"Failed to fetch budget\" });\n    }\n  });\n\n  app.get('/api/budgets/:month/previous-income', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { month } = req.params;\n      \n      // Calculate previous month\n      const [year, monthNum] = month.split('-').map(Number);\n      const prevDate = new Date(year, monthNum - 2, 1); // monthNum - 2 because months are 0-indexed\n      const prevMonth = `${prevDate.getFullYear()}-${String(prevDate.getMonth() + 1).padStart(2, '0')}`;\n      \n      // Get previous month's ledger entries\n      const startDate = `${prevMonth}-01`;\n      const lastDay = new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 0).getDate();\n      const endDate = `${prevMonth}-${lastDay}`;\n      \n      const entries = await storage.getLedgerEntries(userId, startDate, endDate);\n      \n      // Calculate total income\n      const totalIncome = entries\n        .filter(e => e.type === 'income')\n        .reduce((sum, e) => sum + parseFloat(e.amount), 0);\n      \n      res.json({ totalIncome });\n    } catch (error) {\n      console.error(\"Error fetching previous month income:\", error);\n      res.status(500).json({ message: \"Failed to fetch previous month income\" });\n    }\n  });\n\n  app.get('/api/budgets/history/disposable-income', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get all budgets for the user\n      const budgets = await storage.getAllBudgets(userId);\n      \n      // Get all ledger entries for the user\n      const allEntries = await storage.getAllLedgerEntries(userId);\n      \n      // Calculate disposable income and remaining for each month\n      const history = budgets.map(budget => {\n        const [year, month] = budget.month.split('-').map(Number);\n        \n        // Calculate disposable income\n        const disposableIncome = (parseFloat(budget.fixedIncome) - parseFloat(budget.fixedExpense)) + parseFloat(budget.extraIncome);\n        \n        // Calculate total expense for this month\n        const monthExpense = allEntries\n          .filter(e => {\n            const entryDate = new Date(e.date);\n            return e.type === 'expense' && \n                   entryDate.getFullYear() === year && \n                   entryDate.getMonth() + 1 === month;\n          })\n          .reduce((sum, e) => sum + parseFloat(e.amount), 0);\n        \n        const remaining = disposableIncome - monthExpense;\n        \n        return {\n          month: budget.month,\n          disposableIncome,\n          remaining,\n        };\n      });\n      \n      // Sort by month\n      history.sort((a, b) => a.month.localeCompare(b.month));\n      \n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching disposable income history:\", error);\n      res.status(500).json({ message: \"Failed to fetch disposable income history\" });\n    }\n  });\n\n  app.post('/api/budgets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertBudgetSchema.parse({ ...req.body, userId });\n      const budget = await storage.createBudget(data);\n      res.json(budget);\n    } catch (error) {\n      console.error(\"Error creating budget:\", error);\n      res.status(400).json({ message: \"Failed to create budget\" });\n    }\n  });\n\n  app.patch('/api/budgets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const budget = await storage.updateBudget(id, req.body);\n      res.json(budget);\n    } catch (error) {\n      console.error(\"Error updating budget:\", error);\n      res.status(400).json({ message: \"Failed to update budget\" });\n    }\n  });\n\n  // Budget Category routes\n  app.get('/api/budgets/:budgetId/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const { budgetId } = req.params;\n      const categories = await storage.getBudgetCategories(budgetId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching budget categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch budget categories\" });\n    }\n  });\n\n  app.post('/api/budgets/:budgetId/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const { budgetId } = req.params;\n      const data = insertBudgetCategorySchema.parse({ ...req.body, budgetId });\n      const category = await storage.createBudgetCategory(data);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating budget category:\", error);\n      res.status(400).json({ message: \"Failed to create budget category\" });\n    }\n  });\n\n  app.patch('/api/budgets/categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const category = await storage.updateBudgetCategory(id, req.body);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating budget category:\", error);\n      res.status(400).json({ message: \"Failed to update budget category\" });\n    }\n  });\n\n  app.delete('/api/budgets/categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBudgetCategory(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting budget category:\", error);\n      res.status(400).json({ message: \"Failed to delete budget category\" });\n    }\n  });\n\n  // Budget Item routes\n  app.get('/api/budgets/:budgetId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { budgetId } = req.params;\n      const items = await storage.getBudgetItems(budgetId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching budget items:\", error);\n      res.status(500).json({ message: \"Failed to fetch budget items\" });\n    }\n  });\n\n  app.post('/api/budgets/:budgetId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { budgetId } = req.params;\n      const data = insertBudgetItemSchema.parse({ ...req.body, budgetId });\n      const item = await storage.createBudgetItem(data);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating budget item:\", error);\n      res.status(400).json({ message: \"Failed to create budget item\" });\n    }\n  });\n\n  app.patch('/api/budgets/items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const item = await storage.updateBudgetItem(id, req.body);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating budget item:\", error);\n      res.status(400).json({ message: \"Failed to update budget item\" });\n    }\n  });\n\n  app.delete('/api/budgets/items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBudgetItem(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting budget item:\", error);\n      res.status(400).json({ message: \"Failed to delete budget item\" });\n    }\n  });\n\n  // Ledger Entry routes\n  app.get('/api/ledger', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { startDate, endDate } = req.query;\n      const entries = await storage.getLedgerEntries(userId, startDate as string, endDate as string);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching ledger entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch ledger entries\" });\n    }\n  });\n\n  app.post('/api/ledger', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertLedgerEntrySchema.parse({ ...req.body, userId });\n      const entry = await storage.createLedgerEntry(data);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating ledger entry:\", error);\n      res.status(400).json({ message: \"Failed to create ledger entry\" });\n    }\n  });\n\n  app.patch('/api/ledger/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const entry = await storage.updateLedgerEntry(id, req.body);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error updating ledger entry:\", error);\n      res.status(400).json({ message: \"Failed to update ledger entry\" });\n    }\n  });\n\n  app.delete('/api/ledger/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteLedgerEntry(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting ledger entry:\", error);\n      res.status(400).json({ message: \"Failed to delete ledger entry\" });\n    }\n  });\n\n  // Investment Holding routes\n  app.get('/api/investments/holdings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const holdings = await storage.getInvestmentHoldings(userId);\n      res.json(holdings);\n    } catch (error) {\n      console.error(\"Error fetching investment holdings:\", error);\n      res.status(500).json({ message: \"Failed to fetch investment holdings\" });\n    }\n  });\n\n  app.post('/api/investments/holdings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertInvestmentHoldingSchema.parse({ ...req.body, userId });\n      const holding = await storage.createInvestmentHolding(data);\n      res.json(holding);\n    } catch (error) {\n      console.error(\"Error creating investment holding:\", error);\n      res.status(400).json({ message: \"Failed to create investment holding\" });\n    }\n  });\n\n  app.patch('/api/investments/holdings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const holding = await storage.updateInvestmentHolding(id, req.body);\n      res.json(holding);\n    } catch (error) {\n      console.error(\"Error updating investment holding:\", error);\n      res.status(400).json({ message: \"Failed to update investment holding\" });\n    }\n  });\n\n  app.delete('/api/investments/holdings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteInvestmentHolding(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting investment holding:\", error);\n      res.status(400).json({ message: \"Failed to delete investment holding\" });\n    }\n  });\n\n  // Investment Transaction routes\n  app.get('/api/investments/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactions = await storage.getInvestmentTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching investment transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch investment transactions\" });\n    }\n  });\n\n  app.post('/api/investments/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertInvestmentTransactionSchema.parse({ ...req.body, userId });\n      const transaction = await storage.createInvestmentTransaction(data);\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating investment transaction:\", error);\n      res.status(400).json({ message: \"Failed to create investment transaction\" });\n    }\n  });\n\n  // Savings Jar routes\n  app.get('/api/savings-jars', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const jars = await storage.getSavingsJars(userId);\n      \n      // Fetch categories for each jar\n      const jarsWithCategories = await Promise.all(\n        jars.map(async (jar) => {\n          const categories = await storage.getSavingsJarCategories(jar.id);\n          return { ...jar, categories };\n        })\n      );\n      \n      res.json(jarsWithCategories);\n    } catch (error) {\n      console.error(\"Error fetching savings jars:\", error);\n      res.status(500).json({ message: \"Failed to fetch savings jars\" });\n    }\n  });\n\n  app.post('/api/savings-jars', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertSavingsJarSchema.parse({ ...req.body, userId });\n      const jar = await storage.createSavingsJar(data);\n      res.json(jar);\n    } catch (error) {\n      console.error(\"Error creating savings jar:\", error);\n      res.status(400).json({ message: \"Failed to create savings jar\" });\n    }\n  });\n\n  app.patch('/api/savings-jars/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const jar = await storage.updateSavingsJar(id, req.body);\n      res.json(jar);\n    } catch (error) {\n      console.error(\"Error updating savings jar:\", error);\n      res.status(400).json({ message: \"Failed to update savings jar\" });\n    }\n  });\n\n  app.delete('/api/savings-jars/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSavingsJar(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting savings jar:\", error);\n      res.status(400).json({ message: \"Failed to delete savings jar\" });\n    }\n  });\n\n  // Savings Jar Category routes\n  app.get('/api/savings-jars/:jarId/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jarId } = req.params;\n      const categories = await storage.getSavingsJarCategories(jarId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching jar categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch jar categories\" });\n    }\n  });\n\n  app.post('/api/savings-jars/:jarId/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jarId } = req.params;\n      const data = insertSavingsJarCategorySchema.parse({ ...req.body, jarId });\n      const category = await storage.createSavingsJarCategory(data);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating jar category:\", error);\n      res.status(400).json({ message: \"Failed to create jar category\" });\n    }\n  });\n\n  app.patch('/api/savings-jars/categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const category = await storage.updateSavingsJarCategory(id, req.body);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating jar category:\", error);\n      res.status(400).json({ message: \"Failed to update jar category\" });\n    }\n  });\n\n  app.delete('/api/savings-jars/categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSavingsJarCategory(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting jar category:\", error);\n      res.status(400).json({ message: \"Failed to delete jar category\" });\n    }\n  });\n\n  // Savings Jar Deposit routes\n  app.get('/api/savings-jars/:jarId/deposits', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jarId } = req.params;\n      const deposits = await storage.getSavingsJarDeposits(jarId);\n      res.json(deposits);\n    } catch (error) {\n      console.error(\"Error fetching jar deposits:\", error);\n      res.status(500).json({ message: \"Failed to fetch jar deposits\" });\n    }\n  });\n\n  app.post('/api/savings-jars/:jarId/deposits', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jarId } = req.params;\n      const data = insertSavingsJarDepositSchema.parse({ ...req.body, jarId });\n      const deposit = await storage.createSavingsJarDeposit(data);\n      res.json(deposit);\n    } catch (error) {\n      console.error(\"Error creating jar deposit:\", error);\n      res.status(400).json({ message: \"Failed to create jar deposit\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22832},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/PiggyBankIcon.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface PiggyBankIconProps {\n  netWorth: number;\n  className?: string;\n}\n\nexport default function PiggyBankIcon({ netWorth, className = \"\" }: PiggyBankIconProps) {\n  const fillPercentage = Math.min(Math.max((netWorth / 1000000) * 100, 10), 100);\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg\n        width=\"120\"\n        height=\"120\"\n        viewBox=\"0 0 120 120\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"drop-shadow-lg\"\n      >\n        <defs>\n          <linearGradient id=\"piggyGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.3\" />\n            <stop offset={`${fillPercentage}%`} stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.6\" />\n            <stop offset={`${fillPercentage}%`} stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.1\" />\n            <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.g\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n        >\n          <ellipse cx=\"60\" cy=\"70\" rx=\"35\" ry=\"28\" fill=\"url(#piggyGradient)\" stroke=\"hsl(var(--primary))\" strokeWidth=\"2\" />\n          \n          <ellipse cx=\"60\" cy=\"65\" rx=\"38\" ry=\"30\" fill=\"url(#piggyGradient)\" stroke=\"hsl(var(--primary))\" strokeWidth=\"2.5\" />\n          \n          <rect x=\"25\" y=\"85\" width=\"8\" height=\"15\" rx=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.5\" />\n          <rect x=\"45\" y=\"85\" width=\"8\" height=\"15\" rx=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.5\" />\n          <rect x=\"67\" y=\"85\" width=\"8\" height=\"15\" rx=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.5\" />\n          <rect x=\"87\" y=\"85\" width=\"8\" height=\"15\" rx=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.5\" />\n          \n          <path\n            d=\"M 22 65 Q 15 60, 15 55 Q 15 50, 22 48\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth=\"3\"\n            fill=\"none\"\n            strokeLinecap=\"round\"\n          />\n          \n          <path\n            d=\"M 98 65 Q 105 60, 105 55 Q 105 50, 98 48\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth=\"3\"\n            fill=\"none\"\n            strokeLinecap=\"round\"\n          />\n          \n          <ellipse cx=\"100\" cy=\"60\" rx=\"6\" ry=\"8\" fill=\"hsl(var(--primary))\" opacity=\"0.4\" />\n          <path d=\"M 100 52 L 95 45 L 105 45 Z\" fill=\"hsl(var(--primary))\" opacity=\"0.4\" />\n          \n          <circle cx=\"50\" cy=\"60\" r=\"3\" fill=\"hsl(var(--foreground))\" />\n          \n          <ellipse cx=\"70\" cy=\"65\" rx=\"6\" ry=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.6\" />\n          \n          <rect x=\"55\" y=\"48\" width=\"20\" height=\"8\" rx=\"4\" fill=\"hsl(var(--primary))\" opacity=\"0.3\" />\n          <rect x=\"58\" y=\"50\" width=\"6\" height=\"4\" rx=\"1\" fill=\"hsl(var(--background))\" opacity=\"0.8\" />\n        </motion.g>\n      </svg>\n    </div>\n  );\n}\n","size_bytes":3020},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport PiggyBankIcon from \"@/components/PiggyBankIcon\";\nimport { TrendingUp, PieChart, BookOpen, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-primary/5\">\n      <div className=\"max-w-7xl mx-auto px-4 py-12\">\n        <div className=\"text-center mb-16\">\n          <PiggyBankIcon netWorth={500000} className=\"mx-auto mb-6\" />\n          <h1 className=\"text-5xl font-bold mb-4\">錢跡 MoneyTrack</h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            追蹤你的金錢，塑造你的未來\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={handleLogin}\n            data-testid=\"button-login\"\n            className=\"text-lg px-8 py-6\"\n          >\n            開始使用\n          </Button>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mt-16\">\n          <Card className=\"p-6 text-center hover-elevate\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-semibold mb-2\">資產總覽</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              即時查看您的總資產與趨勢圖\n            </p>\n          </Card>\n\n          <Card className=\"p-6 text-center hover-elevate\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <PieChart className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-semibold mb-2\">現金流規劃</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              智慧分配預算，掌控每月收支\n            </p>\n          </Card>\n\n          <Card className=\"p-6 text-center hover-elevate\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <BookOpen className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-semibold mb-2\">記帳本</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              簡單記錄，清楚了解金錢流向\n            </p>\n          </Card>\n\n          <Card className=\"p-6 text-center hover-elevate\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-semibold mb-2\">投資組合</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              追蹤股票、加密貨幣損益\n            </p>\n          </Card>\n        </div>\n\n        <div className=\"mt-16 text-center text-sm text-muted-foreground\">\n          <p>專為台灣人設計的理財應用</p>\n          <p className=\"mt-2\">支援台幣、美元、日幣等多幣別管理</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3221},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/SavingsJarDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { useCreateSavingsJarDeposit, useSavingsJarDeposits } from \"@/hooks/useSavingsJarDeposits\";\nimport { useSavingsJarCategories } from \"@/hooks/useSavingsJarCategories\";\nimport SavingsJarAllocation from \"@/components/SavingsJarAllocation\";\nimport type { SavingsJar } from \"@shared/schema\";\nimport { Trash2, CalendarIcon } from \"lucide-react\";\nimport { useDeleteSavingsJar } from \"@/hooks/useSavingsJars\";\nimport { format } from \"date-fns\";\nimport { zhTW } from \"date-fns/locale\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SavingsJarDialogProps {\n  jar: SavingsJar | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function SavingsJarDialog({ jar, open, onOpenChange }: SavingsJarDialogProps) {\n  const { toast } = useToast();\n  const { data: accounts } = useAssets();\n  const { data: categories } = useSavingsJarCategories(jar?.id);\n  const { data: deposits } = useSavingsJarDeposits(jar?.id);\n  const createDeposit = useCreateSavingsJarDeposit();\n  const deleteJar = useDeleteSavingsJar();\n  \n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [depositAccount, setDepositAccount] = useState(\"\");\n  const [depositNote, setDepositNote] = useState(\"\");\n  const [depositDate, setDepositDate] = useState<Date>(new Date());\n\n  if (!jar) return null;\n\n  const current = parseFloat(jar.currentAmount);\n  const target = parseFloat(jar.targetAmount);\n\n  const handleAddDeposit = async () => {\n    if (!depositAmount || !depositAccount) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫存款金額和選擇帳戶\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createDeposit.mutateAsync({\n        jarId: jar.id,\n        data: {\n          amount: depositAmount,\n          accountId: depositAccount,\n          note: depositNote,\n          depositDate: format(depositDate, 'yyyy-MM-dd'),\n        },\n      });\n\n      toast({\n        title: \"成功\",\n        description: \"存款記錄已新增\",\n      });\n\n      setDepositAmount(\"\");\n      setDepositAccount(\"\");\n      setDepositNote(\"\");\n      setDepositDate(new Date());\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"新增存款失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!confirm(`確定要刪除「${jar.name}」存錢罐嗎？`)) return;\n    \n    try {\n      await deleteJar.mutateAsync(jar.id);\n      toast({\n        title: \"成功\",\n        description: \"存錢罐已刪除\",\n      });\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"刪除存錢罐失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>{jar.name}</span>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={handleDelete}\n              data-testid=\"button-delete-jar\"\n            >\n              <Trash2 className=\"w-4 h-4 text-destructive\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"mb-4\">\n          <div className=\"p-4 bg-muted/50 rounded-md\">\n            <p className=\"text-sm text-muted-foreground mb-1\">目前金額 / 目標金額</p>\n            <p className=\"text-2xl font-bold\">\n              NT$ {current.toLocaleString()} / {target.toLocaleString()}\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              還需 NT$ {Math.max(0, target - current).toLocaleString()}\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"deposit\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"deposit\">新增存款</TabsTrigger>\n            <TabsTrigger value=\"allocation\">類別分配</TabsTrigger>\n            <TabsTrigger value=\"history\">歷史記錄</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"deposit\" className=\"space-y-4 mt-4\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label>存款金額</Label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"0\"\n                  value={depositAmount}\n                  onChange={(e) => setDepositAmount(e.target.value)}\n                  data-testid=\"input-deposit-amount\"\n                />\n              </div>\n\n              <div>\n                <Label>來源帳戶</Label>\n                <Select value={depositAccount} onValueChange={setDepositAccount}>\n                  <SelectTrigger data-testid=\"select-deposit-account\">\n                    <SelectValue placeholder=\"選擇帳戶\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accounts?.map((account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountName} ({account.type})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>存款日期</Label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={cn(\n                        \"w-full justify-start text-left font-normal\",\n                        !depositDate && \"text-muted-foreground\"\n                      )}\n                      data-testid=\"button-deposit-date\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {depositDate ? format(depositDate, 'yyyy年M月d日', { locale: zhTW }) : <span>選擇日期</span>}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={depositDate}\n                      onSelect={(date) => date && setDepositDate(date)}\n                      initialFocus\n                      locale={zhTW}\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              <div>\n                <Label>備註（選填）</Label>\n                <Input\n                  placeholder=\"備註說明\"\n                  value={depositNote}\n                  onChange={(e) => setDepositNote(e.target.value)}\n                  data-testid=\"input-deposit-note\"\n                />\n              </div>\n\n              <Button \n                onClick={handleAddDeposit}\n                className=\"w-full\"\n                disabled={createDeposit.isPending}\n                data-testid=\"button-add-deposit\"\n              >\n                {createDeposit.isPending ? \"新增中...\" : \"新增存款\"}\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"allocation\" className=\"mt-4\">\n            <SavingsJarAllocation\n              totalAmount={current}\n              jarId={jar.id}\n              categories={categories || []}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"mt-4\">\n            <div className=\"space-y-2\">\n              {!deposits || deposits.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">尚無存款記錄</p>\n              ) : (\n                <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n                  {deposits\n                    .sort((a, b) => new Date(b.depositDate).getTime() - new Date(a.depositDate).getTime())\n                    .map((deposit) => {\n                      const account = accounts?.find(acc => acc.id === deposit.accountId);\n                      const amount = parseFloat(deposit.amount);\n                      \n                      return (\n                        <div\n                          key={deposit.id}\n                          className=\"p-4 border rounded-md hover-elevate\"\n                          data-testid={`deposit-record-${deposit.id}`}\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <p className=\"font-semibold text-lg\">\n                                  NT$ {amount.toLocaleString()}\n                                </p>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {format(new Date(deposit.depositDate), 'yyyy年M月d日', { locale: zhTW })}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                來源：{account ? `${account.accountName} (${account.type})` : '未知帳戶'}\n                              </p>\n                              {deposit.note && (\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  備註：{deposit.note}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10487},"client/src/components/CategoryPieChart.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\n\ninterface CategoryData {\n  name: string;\n  value: number;\n  color: string;\n}\n\ninterface CategoryPieChartProps {\n  title: string;\n  data: CategoryData[];\n  totalAmount: number;\n}\n\nexport default function CategoryPieChart({ title, data, totalAmount }: CategoryPieChartProps) {\n  if (data.length === 0 || totalAmount === 0) {\n    return (\n      <Card className=\"p-4\">\n        <p className=\"text-sm font-semibold mb-2\">{title}</p>\n        <div className=\"h-40 flex items-center justify-center\">\n          <p className=\"text-sm text-muted-foreground\">無資料</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-4\">\n      <p className=\"text-sm font-semibold mb-2\">{title}</p>\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={40}\n            outerRadius={70}\n            paddingAngle={2}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip\n            contentStyle={{\n              backgroundColor: \"hsl(var(--background))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\",\n            }}\n            formatter={(value: number) => `NT$ ${value.toLocaleString()}`}\n          />\n          <Legend\n            iconType=\"circle\"\n            iconSize={8}\n            formatter={(value, entry: any) => {\n              const percentage = ((entry.payload.value / totalAmount) * 100).toFixed(1);\n              return `${value} (${percentage}%)`;\n            }}\n            wrapperStyle={{ fontSize: \"12px\" }}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </Card>\n  );\n}\n","size_bytes":1951},"client/src/components/SavingsJarCard.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { PiggyBank, Settings } from \"lucide-react\";\nimport type { SavingsJar } from \"@shared/schema\";\nimport { useUpdateSavingsJar } from \"@/hooks/useSavingsJars\";\n\ninterface SavingsJarCardProps {\n  jar: SavingsJar;\n  onOpenSettings: () => void;\n}\n\nexport default function SavingsJarCard({ jar, onOpenSettings }: SavingsJarCardProps) {\n  const updateJar = useUpdateSavingsJar();\n  \n  const current = parseFloat(jar.currentAmount);\n  const target = parseFloat(jar.targetAmount);\n  const percentage = target > 0 ? Math.min((current / target) * 100, 100) : 0;\n  const isIncluded = jar.includeInDisposable === \"true\";\n\n  const handleToggleInclude = async () => {\n    await updateJar.mutateAsync({\n      id: jar.id,\n      data: { includeInDisposable: isIncluded ? \"false\" : \"true\" }\n    });\n  };\n\n  return (\n    <Card className=\"p-6 hover-elevate active-elevate-2 cursor-pointer\" onClick={onOpenSettings}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 bg-primary/10 rounded-md\">\n            <PiggyBank className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg\" data-testid={`text-jar-name-${jar.id}`}>{jar.name}</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              NT$ {current.toLocaleString()} / {target.toLocaleString()}\n            </p>\n          </div>\n        </div>\n        <Button \n          size=\"icon\" \n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onOpenSettings();\n          }}\n          data-testid={`button-settings-${jar.id}`}\n        >\n          <Settings className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {/* Progress bar with animation */}\n      <div className=\"mb-4\">\n        <Progress \n          value={percentage} \n          className=\"h-3\"\n          data-testid={`progress-${jar.id}`}\n        />\n        <motion.p \n          className=\"text-sm text-muted-foreground mt-2 text-right\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.2 }}\n        >\n          {percentage.toFixed(1)}% 完成\n        </motion.p>\n      </div>\n\n      {/* Include in disposable income switch */}\n      <div className=\"flex items-center justify-between pt-4 border-t\">\n        <span className=\"text-sm text-muted-foreground\">計入可支配收入</span>\n        <Switch\n          checked={isIncluded}\n          onCheckedChange={handleToggleInclude}\n          onClick={(e) => e.stopPropagation()}\n          data-testid={`switch-include-${jar.id}`}\n        />\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2917},"client/src/hooks/useBudgetItems.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { BudgetItem, InsertBudgetItem } from \"@shared/schema\";\n\nexport function useBudgetItems(budgetId?: string) {\n  return useQuery<BudgetItem[]>({\n    queryKey: [\"/api/budgets\", budgetId, \"items\"],\n    enabled: !!budgetId,\n  });\n}\n\nexport function useCreateBudgetItem() {\n  return useMutation({\n    mutationFn: async ({ budgetId, data }: { budgetId: string; data: Omit<InsertBudgetItem, \"budgetId\"> }) => {\n      const res = await apiRequest(\"POST\", `/api/budgets/${budgetId}/items`, data);\n      return await res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\", variables.budgetId, \"items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n\nexport function useUpdateBudgetItem() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBudgetItem> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/budgets/items/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n\nexport function useDeleteBudgetItem() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/budgets/items/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n","size_bytes":1537},"client/src/components/CreateSavingsJarDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCreateSavingsJar } from \"@/hooks/useSavingsJars\";\n\ninterface CreateSavingsJarDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CreateSavingsJarDialog({ open, onOpenChange }: CreateSavingsJarDialogProps) {\n  const { toast } = useToast();\n  const createJar = useCreateSavingsJar();\n  \n  const [name, setName] = useState(\"\");\n  const [targetAmount, setTargetAmount] = useState(\"\");\n\n  const handleCreate = async () => {\n    if (!name.trim() || !targetAmount) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫存錢罐名稱和目標金額\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createJar.mutateAsync({\n        name: name.trim(),\n        targetAmount: targetAmount,\n        currentAmount: \"0\",\n        includeInDisposable: \"false\",\n      });\n\n      toast({\n        title: \"成功\",\n        description: \"存錢罐已創建\",\n      });\n\n      setName(\"\");\n      setTargetAmount(\"\");\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"創建存錢罐失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>創建新存錢罐</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label>存錢罐名稱</Label>\n            <Input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"例如：旅遊基金、買房頭期款\"\n              data-testid=\"input-jar-name\"\n            />\n          </div>\n\n          <div>\n            <Label>目標金額</Label>\n            <Input\n              type=\"number\"\n              value={targetAmount}\n              onChange={(e) => setTargetAmount(e.target.value)}\n              placeholder=\"0\"\n              data-testid=\"input-jar-target\"\n            />\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button \n            onClick={handleCreate}\n            disabled={createJar.isPending}\n            data-testid=\"button-create-jar\"\n          >\n            {createJar.isPending ? \"創建中...\" : \"創建\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2708},"client/src/components/BudgetItemsDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useBudgetItems, useCreateBudgetItem, useDeleteBudgetItem } from \"@/hooks/useBudgetItems\";\nimport { Plus, Trash2 } from \"lucide-react\";\n\ninterface BudgetItemsDialogProps {\n  budgetId: string;\n  type: \"fixed_income\" | \"fixed_expense\";\n  title: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function BudgetItemsDialog({ budgetId, type, title, open, onOpenChange }: BudgetItemsDialogProps) {\n  const { toast } = useToast();\n  const { data: items } = useBudgetItems(budgetId);\n  const createItem = useCreateBudgetItem();\n  const deleteItem = useDeleteBudgetItem();\n  \n  const [itemName, setItemName] = useState(\"\");\n  const [itemAmount, setItemAmount] = useState(\"\");\n\n  const filteredItems = items?.filter(item => item.type === type) || [];\n  const totalAmount = filteredItems.reduce((sum, item) => sum + parseFloat(item.amount), 0);\n\n  const handleAddItem = async () => {\n    if (!itemName || !itemAmount) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫項目名稱和金額\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createItem.mutateAsync({\n        budgetId,\n        data: {\n          type,\n          name: itemName,\n          amount: itemAmount,\n          isAutoCalculated: \"false\",\n        },\n      });\n\n      toast({\n        title: \"成功\",\n        description: \"項目已新增\",\n      });\n\n      setItemName(\"\");\n      setItemAmount(\"\");\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"新增項目失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteItem = async (id: string) => {\n    try {\n      await deleteItem.mutateAsync(id);\n      toast({\n        title: \"成功\",\n        description: \"項目已刪除\",\n      });\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"刪除項目失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* 總額顯示 */}\n          <div className=\"p-4 bg-primary/10 border-primary/20 rounded-md border\">\n            <p className=\"text-sm text-muted-foreground mb-1\">總金額</p>\n            <p className=\"text-2xl font-bold text-primary\">\n              NT$ {totalAmount.toLocaleString()}\n            </p>\n          </div>\n\n          {/* 項目列表 */}\n          <div className=\"space-y-2 max-h-[300px] overflow-y-auto\">\n            {filteredItems.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\">尚無項目</p>\n            ) : (\n              filteredItems.map((item) => (\n                <div\n                  key={item.id}\n                  className=\"flex items-center justify-between p-3 border rounded-md\"\n                  data-testid={`budget-item-${item.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{item.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      NT$ {parseFloat(item.amount).toLocaleString()}\n                    </p>\n                  </div>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={() => handleDeleteItem(item.id)}\n                    data-testid={`button-delete-item-${item.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-destructive\" />\n                  </Button>\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* 新增項目表單 */}\n          <div className=\"space-y-3 pt-4 border-t\">\n            <div>\n              <Label>項目名稱</Label>\n              <Input\n                placeholder=\"例如：房租、伙食...\"\n                value={itemName}\n                onChange={(e) => setItemName(e.target.value)}\n                data-testid=\"input-item-name\"\n              />\n            </div>\n            <div>\n              <Label>金額</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"0\"\n                value={itemAmount}\n                onChange={(e) => setItemAmount(e.target.value)}\n                data-testid=\"input-item-amount\"\n              />\n            </div>\n            <Button\n              onClick={handleAddItem}\n              className=\"w-full\"\n              disabled={createItem.isPending}\n              data-testid=\"button-add-item\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              {createItem.isPending ? \"新增中...\" : \"新增項目\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5191},"client/src/components/ExtraIncomeDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useBudgetItems, useCreateBudgetItem, useDeleteBudgetItem } from \"@/hooks/useBudgetItems\";\nimport { Plus, Trash2 } from \"lucide-react\";\n\ninterface ExtraIncomeDialogProps {\n  budgetId: string;\n  previousMonthIncome: number;\n  fixedExpense: number;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ExtraIncomeDialog({ budgetId, previousMonthIncome, fixedExpense, open, onOpenChange }: ExtraIncomeDialogProps) {\n  const { toast } = useToast();\n  const { data: items } = useBudgetItems(budgetId);\n  const createItem = useCreateBudgetItem();\n  const deleteItem = useDeleteBudgetItem();\n  \n  const [itemName, setItemName] = useState(\"\");\n  const [itemAmount, setItemAmount] = useState(\"\");\n\n  const extraIncomeItems = items?.filter(item => item.type === \"extra_income\") || [];\n  \n  // 計算上月額外收入\n  const calculatedPrevExtra = Math.max(0, previousMonthIncome - fixedExpense);\n  \n  // 檢查是否已存在自動計算的上月額外收入項目\n  const autoItem = extraIncomeItems.find(item => item.isAutoCalculated === \"true\");\n  \n  // 如果上月額外收入改變且沒有自動項目，創建一個\n  useEffect(() => {\n    if (budgetId && calculatedPrevExtra > 0 && !autoItem && extraIncomeItems.length === 0) {\n      createItem.mutateAsync({\n        budgetId,\n        data: {\n          type: \"extra_income\",\n          name: \"上月額外收入\",\n          amount: calculatedPrevExtra.toString(),\n          isAutoCalculated: \"true\",\n        },\n      });\n    }\n  }, [budgetId, calculatedPrevExtra]);\n\n  const totalAmount = extraIncomeItems.reduce((sum, item) => sum + parseFloat(item.amount), 0);\n\n  const handleAddItem = async () => {\n    if (!itemName || !itemAmount) {\n      toast({\n        title: \"錯誤\",\n        description: \"請填寫項目名稱和金額\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createItem.mutateAsync({\n        budgetId,\n        data: {\n          type: \"extra_income\",\n          name: itemName,\n          amount: itemAmount,\n          isAutoCalculated: \"false\",\n        },\n      });\n\n      toast({\n        title: \"成功\",\n        description: \"項目已新增\",\n      });\n\n      setItemName(\"\");\n      setItemAmount(\"\");\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"新增項目失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteItem = async (id: string, isAuto: string) => {\n    if (isAuto === \"true\") {\n      toast({\n        title: \"錯誤\",\n        description: \"無法刪除自動計算的項目\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await deleteItem.mutateAsync(id);\n      toast({\n        title: \"成功\",\n        description: \"項目已刪除\",\n      });\n    } catch (error) {\n      toast({\n        title: \"錯誤\",\n        description: \"刪除項目失敗\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>額外收入項目</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* 總額顯示 */}\n          <div className=\"p-4 bg-primary/10 border-primary/20 rounded-md border\">\n            <p className=\"text-sm text-muted-foreground mb-1\">總金額</p>\n            <p className=\"text-2xl font-bold text-primary\">\n              NT$ {totalAmount.toLocaleString()}\n            </p>\n          </div>\n\n          {/* 項目列表 */}\n          <div className=\"space-y-2 max-h-[300px] overflow-y-auto\">\n            {extraIncomeItems.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\">尚無項目</p>\n            ) : (\n              extraIncomeItems.map((item) => (\n                <div\n                  key={item.id}\n                  className={`flex items-center justify-between p-3 border rounded-md ${\n                    item.isAutoCalculated === \"true\" ? \"bg-muted/30\" : \"\"\n                  }`}\n                  data-testid={`extra-income-item-${item.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <p className=\"font-medium\">{item.name}</p>\n                      {item.isAutoCalculated === \"true\" && (\n                        <span className=\"text-xs bg-primary/20 text-primary px-2 py-0.5 rounded\">\n                          自動計算\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      NT$ {parseFloat(item.amount).toLocaleString()}\n                    </p>\n                  </div>\n                  {item.isAutoCalculated !== \"true\" && (\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => handleDeleteItem(item.id, item.isAutoCalculated)}\n                      data-testid={`button-delete-item-${item.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-destructive\" />\n                    </Button>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* 新增項目表單 */}\n          <div className=\"space-y-3 pt-4 border-t\">\n            <div>\n              <Label>項目名稱</Label>\n              <Input\n                placeholder=\"例如：獎金、兼職收入...\"\n                value={itemName}\n                onChange={(e) => setItemName(e.target.value)}\n                data-testid=\"input-extra-item-name\"\n              />\n            </div>\n            <div>\n              <Label>金額</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"0\"\n                value={itemAmount}\n                onChange={(e) => setItemAmount(e.target.value)}\n                data-testid=\"input-extra-item-amount\"\n              />\n            </div>\n            <Button\n              onClick={handleAddItem}\n              className=\"w-full\"\n              disabled={createItem.isPending}\n              data-testid=\"button-add-extra-item\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              {createItem.isPending ? \"新增中...\" : \"新增項目\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6807},"client/src/components/SavingsJarAllocation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { useCreateSavingsJarCategory, useUpdateSavingsJarCategory, useDeleteSavingsJarCategory } from \"@/hooks/useSavingsJarCategories\";\nimport type { SavingsJarCategory } from \"@shared/schema\";\n\ninterface SavingsJarAllocationProps {\n  totalAmount: number;\n  jarId: string;\n  categories: SavingsJarCategory[];\n}\n\nconst categoryColors = [\n  \"#F7F9F9\", \"#E4F1F6\", \"#D9F2E6\", \"#BEE3F8\", \n  \"#A8E6CF\", \"#C7CEEA\", \"#FDE2E4\", \"#F6E7CB\",\n];\n\nexport default function SavingsJarAllocation({\n  totalAmount,\n  jarId,\n  categories,\n}: SavingsJarAllocationProps) {\n  const [localCategories, setLocalCategories] = useState(categories);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const createCategory = useCreateSavingsJarCategory();\n  const updateCategory = useUpdateSavingsJarCategory();\n  const deleteCategory = useDeleteSavingsJarCategory();\n\n  useEffect(() => {\n    setLocalCategories(categories);\n  }, [categories]);\n\n  const handleSliderChange = (id: string, value: number[]) => {\n    const newValue = value[0];\n    setLocalCategories((prev) =>\n      prev.map((cat) =>\n        cat.id === id ? { ...cat, percentage: newValue } : cat\n      )\n    );\n  };\n\n  const handleSliderCommit = async (id: string, value: number[]) => {\n    const newValue = value[0];\n    await updateCategory.mutateAsync({\n      id,\n      data: { percentage: newValue },\n    });\n  };\n\n  const handleAddCategory = async () => {\n    if (!jarId || !newCategoryName.trim()) return;\n\n    const usedColors = new Set(categories.map(c => c.color));\n    const color = categoryColors.find(c => !usedColors.has(c)) || categoryColors[0];\n\n    await createCategory.mutateAsync({\n      jarId,\n      data: {\n        name: newCategoryName.trim(),\n        percentage: 0,\n        color,\n      },\n    });\n\n    setNewCategoryName(\"\");\n    setDialogOpen(false);\n  };\n\n  const handleDeleteCategory = async (id: string) => {\n    await deleteCategory.mutateAsync(id);\n  };\n\n  const totalPercentage = localCategories.reduce((sum, cat) => sum + cat.percentage, 0);\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">類別分配</h3>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"button-add-jar-category\">\n              <Plus className=\"w-4 h-4 mr-1\" />\n              新增類別\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>新增類別</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>類別名稱</Label>\n                <Input\n                  value={newCategoryName}\n                  onChange={(e) => setNewCategoryName(e.target.value)}\n                  placeholder=\"例如：旅遊、緊急預備金\"\n                  data-testid=\"input-jar-category-name\"\n                />\n              </div>\n              <Button onClick={handleAddCategory} className=\"w-full\" data-testid=\"button-save-jar-category\">\n                新增\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {localCategories.length === 0 ? (\n        <p className=\"text-center text-muted-foreground py-8\">尚無分配類別</p>\n      ) : (\n        <div className=\"space-y-6\">\n          {localCategories\n            .sort((a, b) => b.percentage - a.percentage)\n            .map((category) => {\n              const amount = (totalAmount * category.percentage) / 100;\n              return (\n                <div key={category.id} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-sm\"\n                        style={{ backgroundColor: category.color }}\n                      />\n                      <span className=\"font-medium\">{category.name}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        NT$ {amount.toLocaleString()}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleDeleteCategory(category.id)}\n                        data-testid={`button-delete-jar-category-${category.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <Slider\n                      value={[category.percentage]}\n                      onValueChange={(value) => handleSliderChange(category.id, value)}\n                      onValueCommit={(value) => handleSliderCommit(category.id, value)}\n                      max={100}\n                      step={1}\n                      className=\"flex-1\"\n                      data-testid={`slider-jar-${category.id}`}\n                    />\n                    <span className=\"text-sm font-medium w-12 text-right\">\n                      {category.percentage}%\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          <div className=\"pt-4 border-t\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-semibold\">總計</span>\n              <span className={`font-semibold ${totalPercentage > 100 ? 'text-destructive' : ''}`}>\n                {totalPercentage}%\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6393},"client/src/components/IncomeExpenseDetailDialog.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useLedgerEntries } from \"@/hooks/useLedger\";\nimport { useAssets } from \"@/hooks/useAssets\";\nimport { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\n\ninterface IncomeExpenseDetailDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  type: \"income\" | \"expense\";\n  currentMonth: string;\n}\n\nexport default function IncomeExpenseDetailDialog({\n  open,\n  onOpenChange,\n  type,\n  currentMonth,\n}: IncomeExpenseDetailDialogProps) {\n  const [timeRange, setTimeRange] = useState<\"1M\" | \"3M\" | \"6M\" | \"1Y\" | \"MAX\">(\"3M\");\n  const { data: ledgerEntries } = useLedgerEntries();\n  const { data: accounts } = useAssets();\n\n  const trendData = useMemo(() => {\n    if (!ledgerEntries || !accounts) return [];\n\n    const now = new Date();\n    const months: { month: string; amount: number }[] = [];\n    \n    const monthCount = \n      timeRange === \"1M\" ? 1 :\n      timeRange === \"3M\" ? 3 :\n      timeRange === \"6M\" ? 6 :\n      timeRange === \"1Y\" ? 12 :\n      24; // MAX\n\n    for (let i = monthCount - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      const monthTotal = ledgerEntries\n        .filter(entry => {\n          const entryDate = new Date(entry.date);\n          return entry.type === type && \n                 entryDate.getFullYear() === date.getFullYear() &&\n                 entryDate.getMonth() === date.getMonth();\n        })\n        .reduce((sum, entry) => {\n          const account = accounts.find(a => a.id === entry.accountId);\n          // 換算成台幣\n          const amountInTWD = account && account.currency !== \"TWD\"\n            ? parseFloat(entry.amount) * parseFloat(account.exchangeRate || \"1\")\n            : parseFloat(entry.amount);\n          return sum + amountInTWD;\n        }, 0);\n\n      months.push({\n        month: `${date.getMonth() + 1}月`,\n        amount: monthTotal,\n      });\n    }\n\n    return months;\n  }, [ledgerEntries, accounts, type, timeRange]);\n\n  const currentMonthEntries = useMemo(() => {\n    if (!ledgerEntries || !accounts) return [];\n\n    const [year, month] = currentMonth.split('-');\n    \n    return ledgerEntries\n      .filter(entry => {\n        const entryDate = new Date(entry.date);\n        return entry.type === type &&\n               entryDate.getFullYear() === parseInt(year) &&\n               entryDate.getMonth() + 1 === parseInt(month);\n      })\n      .map(entry => {\n        const account = accounts.find(a => a.id === entry.accountId);\n        // 換算成台幣：如果帳戶幣別不是 TWD，則用匯率換算\n        const amountInTWD = account && account.currency !== \"TWD\"\n          ? parseFloat(entry.amount) * parseFloat(account.exchangeRate || \"1\")\n          : parseFloat(entry.amount);\n        \n        return {\n          date: new Date(entry.date).toLocaleDateString('zh-TW'),\n          category: entry.category,\n          amount: amountInTWD,\n          originalAmount: parseFloat(entry.amount),\n          currency: account?.currency || \"TWD\",\n          account: account?.accountName || \"未知帳戶\",\n          note: entry.note,\n        };\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [ledgerEntries, accounts, currentMonth, type]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{type === \"income\" ? \"收入\" : \"支出\"}明細</DialogTitle>\n        </DialogHeader>\n\n        {/* 趨勢圖 */}\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2 justify-end\">\n            {([\"1M\", \"3M\", \"6M\", \"1Y\", \"MAX\"] as const).map((range) => (\n              <Button\n                key={range}\n                variant={timeRange === range ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setTimeRange(range)}\n                data-testid={`button-range-${range}`}\n              >\n                {range}\n              </Button>\n            ))}\n          </div>\n\n          <Card className=\"p-4\">\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={trendData}>\n                <XAxis \n                  dataKey=\"month\" \n                  tick={{ fontSize: 12 }}\n                  stroke=\"hsl(var(--muted-foreground))\"\n                />\n                <YAxis \n                  tick={{ fontSize: 12 }}\n                  stroke=\"hsl(var(--muted-foreground))\"\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--background))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\",\n                  }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"amount\" \n                  stroke={type === \"income\" ? \"hsl(var(--chart-3))\" : \"hsl(var(--destructive))\"}\n                  strokeWidth={2}\n                  dot={{ r: 4 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n\n          {/* 本月明細 */}\n          <div>\n            <h3 className=\"text-sm font-semibold mb-3\">本月明細</h3>\n            {currentMonthEntries.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-8\">本月無{type === \"income\" ? \"收入\" : \"支出\"}記錄</p>\n            ) : (\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {currentMonthEntries.map((entry, idx) => (\n                  <Card key={idx} className=\"p-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <p className=\"font-medium\">{entry.category}</p>\n                        <p className=\"text-sm text-muted-foreground\">{entry.date} · {entry.account}</p>\n                        {entry.note && (\n                          <p className=\"text-sm text-muted-foreground mt-1\">{entry.note}</p>\n                        )}\n                      </div>\n                      <div className=\"text-right\">\n                        {entry.currency !== \"TWD\" && (\n                          <p className=\"text-xs text-muted-foreground mb-1\">\n                            {type === \"income\" ? \"+\" : \"-\"}{entry.currency} {entry.originalAmount.toLocaleString()}\n                          </p>\n                        )}\n                        <p className={`font-bold ${type === \"income\" ? \"text-chart-3\" : \"text-destructive\"}`}>\n                          {type === \"income\" ? \"+\" : \"-\"}NT$ {entry.amount.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7238},"replit.md":{"content":"# MoneyTrack - Personal Finance Management App\n\n## Overview\n\nMoneyTrack (錢跡) is a modern personal finance application designed specifically for Taiwanese users. The app helps users track their complete financial picture - from income and expenses to investments - using visual dashboards and intelligent cash flow planning. Built with a mobile-first approach following Apple Human Interface Guidelines, the application provides an intuitive experience for managing assets, budgeting, transaction tracking, and investment portfolios.\n\n## Recent Changes (October 2025)\n\n**Budget Items Refactor (Latest)**\n- Converted fixed income/expense/extra income from single values to item-based lists\n- Created budgetItems database table with CRUD operations\n- Budget items stored as separate records (type: fixed_income/fixed_expense/extra_income) with name and amount\n- Fixed income/expense now accessible via clickable cards that open item management dialogs\n- Extra income includes auto-calculated \"上月額外收入\" = max(0, last month income - current month fixed expense)\n- Auto-calculated items cannot be deleted but update automatically\n- Total disposable income calculated as sum of all category allocations for accuracy\n- Enhanced UX: click to view/manage detailed budget items instead of single editable values\n\n**Savings Jar Feature Implementation**\n- Added comprehensive savings jar system with goal tracking and progress visualization\n- Savings jars can be optionally included in disposable income calculations via `includeInDisposable` flag\n- Deposit tracking from asset accounts without affecting account balances\n- Category allocation within savings jars with customizable percentages and colors\n- Jar categories automatically appear in monthly category allocation chart when jar is enabled\n- Smart color matching: jar categories with same name as budget categories use matching colors\n- Animated progress display with framer-motion\n\n**Cash Flow Calculation Enhancement**\n- Extra income automatically calculated as: max(0, previous month income - current month fixed expenses)\n- Extra disposable income equals extra income (not affected by savings jars)\n- Savings jar categories can be included in monthly allocation chart when `includeInDisposable` is enabled\n\n**Ledger Historical Trends**\n- Added disposable income history trend dialog in ledger page\n- Two separate charts: one for monthly disposable income, one for monthly remaining balance\n- Interactive visualizations with historical data table\n- Accessible by clicking on disposable income or remaining disposable income cards\n\n**UI/UX Improvements**\n- Enhanced budget usage charts with stronger visual contrast (15% opacity for unused, saturated gradients for used)\n- Red overspending warnings when budget category usage exceeds allocation\n- Asset trend chart with complete time series and proper monthly/daily scaling\n- Improved carousel navigation in ledger statistics\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & UI Components**\n- React with TypeScript as the core framework\n- Vite for build tooling and development server\n- Wouter for client-side routing (lightweight alternative to React Router)\n- shadcn/ui component library built on Radix UI primitives\n- Tailwind CSS for styling with custom Taiwan-localized design tokens\n- Framer Motion for animations (piggy bank icon and transitions)\n- Recharts for data visualization (trends, pie charts, allocation charts)\n\n**State Management**\n- TanStack Query (React Query) for server state management and caching\n- React hooks for local component state\n- Custom hooks for data operations (useAssets, useBudget, useLedger, etc.)\n\n**Design System**\n- Custom color palette optimized for both light and dark modes\n- Primary Blue (220 88% 63%) for actions and key metrics\n- Accent Navy (215 25% 29%) for headers and emphasis\n- Typography using Noto Sans TC and PingFang TC for Chinese localization\n- Consistent spacing and elevation system for cards and interactions\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js running on Node.js\n- TypeScript for type safety across the full stack\n- RESTful API design pattern\n- Session-based authentication using Replit Auth (OpenID Connect)\n\n**Database & ORM**\n- PostgreSQL via Neon serverless database\n- Drizzle ORM for type-safe database queries\n- Schema-first design with Zod validation\n- Database migrations managed through Drizzle Kit\n\n**Data Models**\n- Users: Profile and preferences\n- Asset Accounts: Multi-currency account management with exchange rates\n- Asset History: Time-series data for net worth tracking\n- Budgets: Monthly budget planning with fixed and variable income/expenses\n- Budget Categories: Customizable allocation categories with percentages\n- Budget Items: Individual income/expense items (type: fixed_income/fixed_expense/extra_income) with name, amount, and auto-calculation flag\n- Ledger Entries: Transaction records with categorization\n- Investment Holdings & Transactions: Portfolio tracking\n- Savings Jars: Goal-based savings with progress tracking and category allocation\n- Savings Jar Categories: Allocation breakdown for savings goals\n- Savings Jar Deposits: Deposit records from asset accounts (non-deductive)\n\n**Session Management**\n- PostgreSQL-backed sessions using connect-pg-simple\n- HTTP-only secure cookies\n- 7-day session TTL\n- CSRF protection through session secrets\n\n### API Architecture\n\n**Authentication Endpoints**\n- `/api/login` - Initiates OpenID Connect flow\n- `/api/callback` - OAuth callback handler\n- `/api/auth/user` - Current user session retrieval\n- `/api/logout` - Session termination\n\n**Resource Endpoints**\n- `/api/assets` - CRUD operations for asset accounts\n- `/api/asset-history` - Historical net worth data\n- `/api/budgets/:month` - Monthly budget retrieval and management\n- `/api/budgets/:month/previous-income` - Previous month income calculation\n- `/api/budgets/history/disposable-income` - Historical disposable income trends\n- `/api/budgets/:id/categories` - Budget category allocation\n- `/api/budgets/:budgetId/items` - Budget items CRUD operations\n- `/api/budgets/items/:id` - Individual budget item update/delete\n- `/api/ledger` - Transaction entry management\n- `/api/transfer` - Inter-account transfers\n- `/api/exchange-rates` - Real-time currency conversion\n- `/api/savings-jars` - CRUD operations for savings jars\n- `/api/savings-jars/:id/categories` - Savings jar category allocation\n- `/api/savings-jars/:id/deposits` - Savings jar deposit records\n\n**Data Flow Pattern**\n1. Frontend components use custom hooks (useAssets, useBudget, etc.)\n2. Hooks leverage TanStack Query for caching and optimistic updates\n3. API requests go through centralized apiRequest function with error handling\n4. Server validates input using Zod schemas derived from Drizzle models\n5. Storage layer abstracts database operations via IStorage interface\n6. Responses are cached and invalidated based on mutation success\n\n### External Dependencies\n\n**Third-Party Services**\n- Replit Authentication (OpenID Connect) - User authentication and session management\n- Neon Database - Serverless PostgreSQL hosting\n- Open Exchange Rates API (exchangerate-api.com) - Real-time currency conversion with 1-hour caching\n\n**Key Libraries**\n- @neondatabase/serverless - WebSocket-based PostgreSQL client\n- drizzle-orm & drizzle-zod - Type-safe ORM and validation\n- @tanstack/react-query - Async state management\n- @radix-ui/* - Accessible UI primitives (20+ components)\n- react-hook-form with @hookform/resolvers - Form validation\n- date-fns - Date manipulation and formatting\n- recharts - Chart visualization\n- framer-motion - Animation library\n- openid-client & passport - OAuth/OIDC implementation\n- express-session & connect-pg-simple - Session management\n\n**Development Tools**\n- TypeScript compiler with strict mode\n- ESBuild for server bundling\n- Vite plugins for development (runtime error overlay, cartographer, dev banner)\n- PostCSS with Tailwind and Autoprefixer\n\n**Asset Management**\n- Custom exchange rate service with local caching\n- Automatic TWD conversion for multi-currency support\n- Support for 7 currencies (TWD, USD, JPY, EUR, GBP, CNY, HKD)\n- Manual exchange rate override capability","size_bytes":8310},"client/src/hooks/useSavingsJarCategories.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { SavingsJarCategory, InsertSavingsJarCategory } from \"@shared/schema\";\n\nexport function useSavingsJarCategories(jarId?: string) {\n  return useQuery<SavingsJarCategory[]>({\n    queryKey: [\"/api/savings-jars\", jarId, \"categories\"],\n    enabled: !!jarId,\n  });\n}\n\nexport function useCreateSavingsJarCategory() {\n  return useMutation({\n    mutationFn: async ({ jarId, data }: { jarId: string; data: Omit<InsertSavingsJarCategory, \"jarId\"> }) => {\n      const res = await apiRequest(\"POST\", `/api/savings-jars/${jarId}/categories`, data);\n      return await res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\", variables.jarId, \"categories\"] });\n    },\n  });\n}\n\nexport function useUpdateSavingsJarCategory() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertSavingsJarCategory> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/savings-jars/categories/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n\nexport function useDeleteSavingsJarCategory() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/savings-jars/categories/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n","size_bytes":1620},"client/src/components/EditableAmount.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface EditableAmountProps {\n  value: string;\n  label: string;\n  onSave: (value: string) => Promise<void>;\n  dataTestId?: string;\n}\n\nexport default function EditableAmount({ value, label, onSave, dataTestId }: EditableAmountProps) {\n  const [open, setOpen] = useState(false);\n  const [editValue, setEditValue] = useState(value);\n  const [saving, setSaving] = useState(false);\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      await onSave(editValue);\n      setOpen(false);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setEditValue(value);\n          setOpen(true);\n        }}\n        className=\"text-left hover-elevate active-elevate-2 rounded-md transition-colors\"\n        data-testid={dataTestId}\n      >\n        <p className=\"text-sm text-muted-foreground mb-1\">{label}</p>\n        <p className=\"text-2xl font-bold text-primary\">\n          NT$ {parseFloat(value || \"0\").toLocaleString()}\n        </p>\n      </button>\n\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>修改{label}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"amount\">金額</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                value={editValue}\n                onChange={(e) => setEditValue(e.target.value)}\n                placeholder=\"0\"\n                data-testid={`input-edit-${dataTestId}`}\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1\"\n                disabled={saving}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleSave}\n                className=\"flex-1\"\n                disabled={saving}\n                data-testid={`button-save-${dataTestId}`}\n              >\n                {saving ? \"儲存中...\" : \"儲存\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":2524},"client/src/components/BudgetUsageChart.tsx":{"content":"import { Card } from \"@/components/ui/card\";\n\ninterface CategoryUsage {\n  name: string;\n  budgeted: number;\n  used: number;\n  color: string;\n}\n\ninterface BudgetUsageChartProps {\n  categories: CategoryUsage[];\n}\n\nexport default function BudgetUsageChart({ categories }: BudgetUsageChartProps) {\n  if (categories.length === 0) {\n    return (\n      <Card className=\"p-6\">\n        <p className=\"text-center text-muted-foreground py-8\">\n          尚無預算分配資料\n        </p>\n      </Card>\n    );\n  }\n\n  const maxBudget = Math.max(...categories.map(c => c.budgeted), 1);\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-sm font-semibold mb-4\">各類別預算使用狀況</h3>\n      <div className=\"space-y-4\">\n        {categories.map((category) => {\n          const budgetPercentage = (category.budgeted / maxBudget) * 100;\n          const usedPercentage = category.budgeted > 0 \n            ? (category.used / category.budgeted) * 100 \n            : 0;\n          const isOverBudget = usedPercentage > 100;\n\n          return (\n            <div key={category.name} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-sm\"\n                    style={{ backgroundColor: category.color }}\n                  />\n                  <span className=\"text-sm font-medium\">{category.name}</span>\n                </div>\n                <div className=\"text-sm\">\n                  <span className={`font-bold ${isOverBudget ? 'text-destructive' : ''}`}>\n                    NT$ {category.used.toLocaleString()}\n                  </span>\n                  <span className=\"text-muted-foreground\"> / {category.budgeted.toLocaleString()}</span>\n                </div>\n              </div>\n              <div className=\"relative h-8 bg-muted/30 rounded-md overflow-hidden border border-border/50\">\n                {/* 底層：預算總額（淡色背景） */}\n                <div\n                  className=\"absolute top-0 left-0 h-full transition-all duration-300\"\n                  style={{\n                    width: `${budgetPercentage}%`,\n                    backgroundColor: category.color,\n                    opacity: 0.15,\n                  }}\n                />\n                {/* 上層：已使用金額（強烈飽和色 + 漸變） */}\n                <div\n                  className=\"absolute top-0 left-0 h-full transition-all duration-300\"\n                  style={{\n                    width: `${Math.min((budgetPercentage * usedPercentage) / 100, 100)}%`,\n                    background: isOverBudget \n                      ? `linear-gradient(90deg, ${category.color} 0%, hsl(var(--destructive)) 100%)`\n                      : `linear-gradient(135deg, ${category.color} 0%, ${category.color}dd 100%)`,\n                    boxShadow: `inset 0 1px 2px rgba(0, 0, 0, 0.1)`,\n                  }}\n                />\n                {/* 超支警示條 */}\n                {isOverBudget && (\n                  <div\n                    className=\"absolute top-0 h-full transition-all duration-300 border-r-2 border-destructive\"\n                    style={{\n                      left: `${budgetPercentage}%`,\n                      width: '2px',\n                    }}\n                  />\n                )}\n                <div className=\"absolute inset-0 flex items-center px-3\">\n                  <span className=\"text-xs font-semibold text-foreground drop-shadow-[0_1px_2px_rgba(255,255,255,0.8)]\">\n                    {usedPercentage.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3783},"client/src/hooks/useSavingsJarDeposits.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { SavingsJarDeposit, InsertSavingsJarDeposit } from \"@shared/schema\";\n\nexport function useSavingsJarDeposits(jarId?: string) {\n  return useQuery<SavingsJarDeposit[]>({\n    queryKey: [\"/api/savings-jars\", jarId, \"deposits\"],\n    enabled: !!jarId,\n  });\n}\n\nexport function useCreateSavingsJarDeposit() {\n  return useMutation({\n    mutationFn: async ({ jarId, data }: { jarId: string; data: Omit<InsertSavingsJarDeposit, \"jarId\"> }) => {\n      const res = await apiRequest(\"POST\", `/api/savings-jars/${jarId}/deposits`, data);\n      return await res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\", variables.jarId, \"deposits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n","size_bytes":925},"client/src/components/LedgerStatsCarousel.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LedgerStatsCarouselProps {\n  children: React.ReactNode[];\n}\n\nexport default function LedgerStatsCarousel({ children }: LedgerStatsCarouselProps) {\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const nextPage = () => {\n    setCurrentPage((prev) => (prev + 1) % children.length);\n  };\n\n  const prevPage = () => {\n    setCurrentPage((prev) => (prev - 1 + children.length) % children.length);\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"overflow-hidden\">\n        <div \n          className=\"flex transition-transform duration-300 ease-in-out\"\n          style={{ transform: `translateX(-${currentPage * 100}%)` }}\n        >\n          {children.map((child, index) => (\n            <div key={index} className=\"min-w-full\">\n              {child}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* 導航點點 */}\n      <div className=\"flex justify-center gap-2 mt-4\">\n        {children.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentPage(index)}\n            className={cn(\n              \"w-2 h-2 rounded-full transition-all\",\n              currentPage === index \n                ? \"bg-primary w-6\" \n                : \"bg-muted-foreground/30\"\n            )}\n            data-testid={`carousel-dot-${index}`}\n          />\n        ))}\n      </div>\n\n      {/* 滑動提示（可選） */}\n      <div className=\"absolute top-1/2 -translate-y-1/2 left-2 right-2 flex justify-between pointer-events-none\">\n        <button\n          onClick={prevPage}\n          className=\"pointer-events-auto p-1 rounded-full bg-background/50 hover:bg-background/80 transition-colors\"\n          data-testid=\"carousel-prev\"\n        >\n          <ChevronLeft className=\"w-5 h-5 text-muted-foreground\" />\n        </button>\n        <button\n          onClick={nextPage}\n          className=\"pointer-events-auto p-1 rounded-full bg-background/50 hover:bg-background/80 transition-colors\"\n          data-testid=\"carousel-next\"\n        >\n          <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2306},"client/src/hooks/useBudgetCategories.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { BudgetCategory, InsertBudgetCategory } from \"@shared/schema\";\n\nexport function useBudgetCategories(budgetId: string | undefined) {\n  return useQuery<BudgetCategory[]>({\n    queryKey: [\"/api/budgets\", budgetId, \"categories\"],\n    enabled: !!budgetId,\n  });\n}\n\nexport function useCreateBudgetCategory() {\n  return useMutation({\n    mutationFn: async ({ budgetId, data }: { budgetId: string; data: Omit<InsertBudgetCategory, 'budgetId'> }) => {\n      return apiRequest(\"POST\", `/api/budgets/${budgetId}/categories`, data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\", variables.budgetId, \"categories\"] });\n    },\n  });\n}\n\nexport function useUpdateBudgetCategory() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<BudgetCategory> }) => {\n      return apiRequest(\"PATCH\", `/api/budgets/categories/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n\nexport function useDeleteBudgetCategory() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/budgets/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n","size_bytes":1452},"client/src/components/CategoryAllocationChart.tsx":{"content":"import { Card } from \"@/components/ui/card\";\n\ninterface CategoryData {\n  name: string;\n  amount: number;\n  color: string;\n}\n\ninterface CategoryAllocationChartProps {\n  categories: CategoryData[];\n}\n\nexport default function CategoryAllocationChart({ categories }: CategoryAllocationChartProps) {\n  // 按金額大到小排序\n  const sortedCategories = [...categories].sort((a, b) => b.amount - a.amount);\n  \n  const maxAmount = Math.max(...categories.map(c => c.amount), 1);\n\n  if (categories.length === 0) {\n    return (\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">本月各類別可支配金額</h3>\n        <p className=\"text-center text-muted-foreground py-8\">\n          尚未設定分配類別\n        </p>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-6\">本月各類別可支配金額</h3>\n      <div className=\"space-y-4\">\n        {sortedCategories.map((category) => {\n          const percentage = (category.amount / maxAmount) * 100;\n          \n          return (\n            <div key={category.name} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-sm\"\n                    style={{ backgroundColor: category.color }}\n                  />\n                  <span className=\"text-sm font-medium\">{category.name}</span>\n                </div>\n                <span className=\"text-sm font-bold\">\n                  NT$ {category.amount.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"relative h-8 bg-muted/50 rounded-md overflow-hidden border border-border\">\n                <div\n                  className=\"absolute top-0 left-0 h-full transition-all duration-300\"\n                  style={{\n                    width: `${percentage}%`,\n                    backgroundColor: category.color,\n                  }}\n                />\n                <div className=\"absolute inset-0 flex items-center px-3\">\n                  <span className=\"text-xs font-medium text-foreground\">\n                    {category.amount > 0 ? `${((category.amount / sortedCategories.reduce((sum, c) => sum + c.amount, 0)) * 100).toFixed(1)}%` : '0%'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2496},"client/src/hooks/useBudgetOperations.ts":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { InsertBudget, Budget } from \"@shared/schema\";\n\nexport function useCreateBudget() {\n  return useMutation({\n    mutationFn: async (data: Omit<InsertBudget, 'userId'>) => {\n      return apiRequest(\"POST\", \"/api/budgets\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n\nexport function useUpdateBudget() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Budget> }) => {\n      return apiRequest(\"PATCH\", `/api/budgets/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/budgets\"] });\n    },\n  });\n}\n","size_bytes":784},"client/src/components/DisposableIncomeTrendDialog.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card } from \"@/components/ui/card\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\ninterface DisposableIncomeTrendDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface HistoryData {\n  month: string;\n  disposableIncome: number;\n  remaining: number;\n}\n\nexport default function DisposableIncomeTrendDialog({\n  open,\n  onOpenChange,\n}: DisposableIncomeTrendDialogProps) {\n  const { data: history, isLoading } = useQuery<HistoryData[]>({\n    queryKey: ['/api/budgets/history/disposable-income'],\n    enabled: open,\n  });\n\n  const chartData = history?.map(item => ({\n    month: item.month,\n    可支配金額: item.disposableIncome,\n    剩餘金額: item.remaining,\n  })) || [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>可支配金額歷史趨勢</DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"py-8 text-center text-muted-foreground\">載入中...</div>\n        ) : !history || history.length === 0 ? (\n          <div className=\"py-8 text-center text-muted-foreground\">暫無歷史數據</div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* 每月可支配收入趨勢 */}\n            <div>\n              <h3 className=\"font-semibold mb-3\">每月可支配收入趨勢</h3>\n              <Card className=\"p-4\">\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis \n                      dataKey=\"month\" \n                      className=\"text-xs\"\n                      tick={{ fill: 'hsl(var(--foreground))' }}\n                    />\n                    <YAxis \n                      className=\"text-xs\"\n                      tick={{ fill: 'hsl(var(--foreground))' }}\n                      tickFormatter={(value) => `${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '6px',\n                      }}\n                      formatter={(value: number) => `NT$ ${value.toLocaleString()}`}\n                    />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"可支配金額\"\n                      stroke=\"hsl(var(--chart-1))\"\n                      strokeWidth={2}\n                      dot={{ fill: 'hsl(var(--chart-1))' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Card>\n            </div>\n\n            {/* 每月剩餘可用餘額趨勢 */}\n            <div>\n              <h3 className=\"font-semibold mb-3\">每月剩餘可用餘額趨勢</h3>\n              <Card className=\"p-4\">\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis \n                      dataKey=\"month\" \n                      className=\"text-xs\"\n                      tick={{ fill: 'hsl(var(--foreground))' }}\n                    />\n                    <YAxis \n                      className=\"text-xs\"\n                      tick={{ fill: 'hsl(var(--foreground))' }}\n                      tickFormatter={(value) => `${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '6px',\n                      }}\n                      formatter={(value: number) => `NT$ ${value.toLocaleString()}`}\n                    />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"剩餘金額\"\n                      stroke=\"hsl(var(--chart-3))\"\n                      strokeWidth={2}\n                      dot={{ fill: 'hsl(var(--chart-3))' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Card>\n            </div>\n\n            <div className=\"grid gap-2\">\n              <h3 className=\"font-semibold\">歷史記錄</h3>\n              <div className=\"space-y-2 max-h-[300px] overflow-y-auto\">\n                {history.map((item) => (\n                  <Card key={item.month} className=\"p-3\" data-testid={`history-item-${item.month}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">{item.month}</span>\n                      <div className=\"flex gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">可支配：</span>\n                          <span className=\"font-semibold ml-1\">\n                            NT$ {item.disposableIncome.toLocaleString()}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">剩餘：</span>\n                          <span\n                            className={`font-semibold ml-1 ${\n                              item.remaining >= 0 ? \"text-chart-3\" : \"text-destructive\"\n                            }`}\n                          >\n                            NT$ {item.remaining.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6263},"client/src/hooks/useSavingsJars.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { SavingsJar, InsertSavingsJar } from \"@shared/schema\";\n\nexport function useSavingsJars() {\n  return useQuery<SavingsJar[]>({\n    queryKey: [\"/api/savings-jars\"],\n  });\n}\n\nexport function useCreateSavingsJar() {\n  return useMutation({\n    mutationFn: async (data: Omit<InsertSavingsJar, \"userId\">) => {\n      const res = await apiRequest(\"POST\", \"/api/savings-jars\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n\nexport function useUpdateSavingsJar() {\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertSavingsJar> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/savings-jars/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n\nexport function useDeleteSavingsJar() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/savings-jars/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-jars\"] });\n    },\n  });\n}\n","size_bytes":1370}},"version":2}